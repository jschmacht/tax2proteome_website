/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Directive } from "@angular/core";
import { ItemListService } from "../services/item-list.service";
import { AutocompleteService } from "../services/autocomplete.service";
var OptionDirective = /** @class */ (function () {
    function OptionDirective(autocompleteService, itemListService) {
        this.autocompleteService = autocompleteService;
        this.itemListService = itemListService;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    OptionDirective.prototype.onMouseEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.itemListService.activeIndex = this.index;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    OptionDirective.prototype.onMouseLeave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.itemListService.restoreIntialActiveIndex();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    OptionDirective.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.autocompleteService.selectItemSubject.next(this.index);
    };
    OptionDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[remote-autocomplete-option]',
                    host: {
                        '(mouseenter)': 'onMouseEnter($event)',
                        '(mouseleave)': 'onMouseLeave($event)',
                        '(click)': 'onClick($event)'
                    }
                },] },
    ];
    OptionDirective.ctorParameters = function () { return [
        { type: AutocompleteService },
        { type: ItemListService }
    ]; };
    OptionDirective.propDecorators = {
        index: [{ type: Input, args: ['itemIndex',] }]
    };
    return OptionDirective;
}());
export { OptionDirective };
if (false) {
    /** @type {?} */
    OptionDirective.prototype.index;
    /**
     * @type {?}
     * @private
     */
    OptionDirective.prototype.autocompleteService;
    /**
     * @type {?}
     * @private
     */
    OptionDirective.prototype.itemListService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLWRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXJlbW90ZS1hdXRvY29tcGxldGUvIiwic291cmNlcyI6WyJhcHAvZGlyZWN0aXZlcy9vcHRpb24tZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0gsS0FBSyxFQUNMLFNBQVMsRUFFWixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDaEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFdkU7SUFXSSx5QkFBb0IsbUJBQXdDLEVBQ2hELGVBQWdDO1FBRHhCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDaEQsb0JBQWUsR0FBZixlQUFlLENBQWlCO0lBQzVDLENBQUM7Ozs7O0lBRUQsc0NBQVk7Ozs7SUFBWixVQUFhLEtBQWlCO1FBQzFCLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDbEQsQ0FBQzs7Ozs7SUFFRCxzQ0FBWTs7OztJQUFaLFVBQWEsS0FBaUI7UUFDMUIsSUFBSSxDQUFDLGVBQWUsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO0lBQ3BELENBQUM7Ozs7O0lBRUQsaUNBQU87Ozs7SUFBUCxVQUFRLEtBQWlCO1FBQ3JCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hFLENBQUM7O2dCQXpCSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLDhCQUE4QjtvQkFDeEMsSUFBSSxFQUFFO3dCQUNGLGNBQWMsRUFBRSxzQkFBc0I7d0JBQ3RDLGNBQWMsRUFBRSxzQkFBc0I7d0JBQ3RDLFNBQVMsRUFBRSxpQkFBaUI7cUJBQy9CO2lCQUNKOzs7Z0JBVFEsbUJBQW1CO2dCQURuQixlQUFlOzs7d0JBWW5CLEtBQUssU0FBQyxXQUFXOztJQWlCdEIsc0JBQUM7Q0FBQSxBQTFCRCxJQTBCQztTQWxCWSxlQUFlOzs7SUFDeEIsZ0NBQTBCOzs7OztJQUVkLDhDQUFnRDs7Ozs7SUFDeEQsMENBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIElucHV0LFxyXG4gICAgRGlyZWN0aXZlLFxyXG4gICAgSG9zdExpc3RlbmVyXHJcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuXHJcbmltcG9ydCB7IEl0ZW1MaXN0U2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9pdGVtLWxpc3Quc2VydmljZVwiO1xyXG5pbXBvcnQgeyBBdXRvY29tcGxldGVTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2F1dG9jb21wbGV0ZS5zZXJ2aWNlXCI7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW3JlbW90ZS1hdXRvY29tcGxldGUtb3B0aW9uXScsXHJcbiAgICBob3N0OiB7XHJcbiAgICAgICAgJyhtb3VzZWVudGVyKSc6ICdvbk1vdXNlRW50ZXIoJGV2ZW50KScsXHJcbiAgICAgICAgJyhtb3VzZWxlYXZlKSc6ICdvbk1vdXNlTGVhdmUoJGV2ZW50KScsXHJcbiAgICAgICAgJyhjbGljayknOiAnb25DbGljaygkZXZlbnQpJ1xyXG4gICAgfVxyXG59KVxyXG5leHBvcnQgY2xhc3MgT3B0aW9uRGlyZWN0aXZlIHtcclxuICAgIEBJbnB1dCgnaXRlbUluZGV4JykgaW5kZXg7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhdXRvY29tcGxldGVTZXJ2aWNlOiBBdXRvY29tcGxldGVTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgaXRlbUxpc3RTZXJ2aWNlOiBJdGVtTGlzdFNlcnZpY2UpIHtcclxuICAgIH1cclxuXHJcbiAgICBvbk1vdXNlRW50ZXIoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICB0aGlzLml0ZW1MaXN0U2VydmljZS5hY3RpdmVJbmRleCA9IHRoaXMuaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgb25Nb3VzZUxlYXZlKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5pdGVtTGlzdFNlcnZpY2UucmVzdG9yZUludGlhbEFjdGl2ZUluZGV4KCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25DbGljayhldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlU2VydmljZS5zZWxlY3RJdGVtU3ViamVjdC5uZXh0KHRoaXMuaW5kZXgpO1xyXG4gICAgfVxyXG59Il19