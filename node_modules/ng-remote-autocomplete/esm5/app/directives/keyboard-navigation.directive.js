/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, ElementRef, Input } from "@angular/core";
import { KeyCode } from "../enums/key-kode";
import { ItemListService } from "../services/item-list.service";
import { AutocompleteService } from "../services/autocomplete.service";
import { ScrollService } from "../services/scroll-service";
var KeyboardNavigationDirective = /** @class */ (function () {
    function KeyboardNavigationDirective(autocompleteService, itemListService, element) {
        this.autocompleteService = autocompleteService;
        this.itemListService = itemListService;
        this.element = element;
        this.stopEnterPropagation = false;
        this.scrollService = new ScrollService(element);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    KeyboardNavigationDirective.prototype.onKeydown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var key = event.which || event.keyCode;
        switch (key) {
            case KeyCode.DownArrow:
                this.handleDownKey(event);
                break;
            case KeyCode.UpArrow:
                this.handleUpKey(event);
                break;
            case KeyCode.Enter:
                this.handleEnter(event);
                break;
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    KeyboardNavigationDirective.prototype.handleDownKey = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.itemListService.activeIndex++;
        this.scrollService.handleKeyboarOptionNavigation(this.itemListService.activeIndex);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    KeyboardNavigationDirective.prototype.handleUpKey = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.itemListService.activeIndex--;
        this.scrollService.handleKeyboarOptionNavigation(this.itemListService.activeIndex);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    KeyboardNavigationDirective.prototype.handleEnter = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.itemListService.activeIndex >= 0) {
            this.autocompleteService.selectItemSubject.next(this.itemListService.activeIndex);
            event.preventDefault();
            if (this.stopEnterPropagation) {
                event.stopPropagation();
            }
        }
    };
    KeyboardNavigationDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[keyboard-navigation]'
                },] },
    ];
    KeyboardNavigationDirective.ctorParameters = function () { return [
        { type: AutocompleteService },
        { type: ItemListService },
        { type: ElementRef }
    ]; };
    KeyboardNavigationDirective.propDecorators = {
        stopEnterPropagation: [{ type: Input }],
        onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return KeyboardNavigationDirective;
}());
export { KeyboardNavigationDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    KeyboardNavigationDirective.prototype.scrollService;
    /** @type {?} */
    KeyboardNavigationDirective.prototype.stopEnterPropagation;
    /**
     * @type {?}
     * @private
     */
    KeyboardNavigationDirective.prototype.autocompleteService;
    /**
     * @type {?}
     * @private
     */
    KeyboardNavigationDirective.prototype.itemListService;
    /**
     * @type {?}
     * @private
     */
    KeyboardNavigationDirective.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQtbmF2aWdhdGlvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1yZW1vdGUtYXV0b2NvbXBsZXRlLyIsInNvdXJjZXMiOlsiYXBwL2RpcmVjdGl2ZXMva2V5Ym9hcmQtbmF2aWdhdGlvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsWUFBWSxFQUNaLFVBQVUsRUFDVixLQUFLLEVBQ1IsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFM0Q7SUFRSSxxQ0FBb0IsbUJBQXdDLEVBQ2hELGVBQWdDLEVBQ2hDLE9BQW1CO1FBRlgsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUNoRCxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUp0Qix5QkFBb0IsR0FBWSxLQUFLLENBQUM7UUFLM0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwRCxDQUFDOzs7OztJQUVvQywrQ0FBUzs7OztJQUE5QyxVQUErQyxLQUFvQjs7WUFDM0QsR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU87UUFFdEMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNWLEtBQUssT0FBTyxDQUFDLFNBQVM7Z0JBQ2xCLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzFCLEtBQUssQ0FBQztZQUNWLEtBQUssT0FBTyxDQUFDLE9BQU87Z0JBQ2hCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3hCLEtBQUssQ0FBQztZQUNWLEtBQUssT0FBTyxDQUFDLEtBQUs7Z0JBQ2QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDeEIsS0FBSyxDQUFDO1FBQ2QsQ0FBQztJQUNMLENBQUM7Ozs7OztJQUVPLG1EQUFhOzs7OztJQUFyQixVQUFzQixLQUFvQjtRQUN0QyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ25DLElBQUksQ0FBQyxhQUFhLENBQUMsNkJBQTZCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN2RixDQUFDOzs7Ozs7SUFFTyxpREFBVzs7Ozs7SUFBbkIsVUFBb0IsS0FBb0I7UUFDcEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsYUFBYSxDQUFDLDZCQUE2QixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdkYsQ0FBQzs7Ozs7O0lBRU8saURBQVc7Ozs7O0lBQW5CLFVBQW9CLEtBQW9CO1FBQ3BDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2xGLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUV2QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO2dCQUM1QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDNUIsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDOztnQkFqREosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSx1QkFBdUI7aUJBQ3BDOzs7Z0JBTFEsbUJBQW1CO2dCQURuQixlQUFlO2dCQUxwQixVQUFVOzs7dUNBZVQsS0FBSzs0QkFRTCxZQUFZLFNBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDOztJQW9DdkMsa0NBQUM7Q0FBQSxBQWxERCxJQWtEQztTQS9DWSwyQkFBMkI7Ozs7OztJQUNwQyxvREFBOEM7O0lBRTlDLDJEQUErQzs7Ozs7SUFFbkMsMERBQWdEOzs7OztJQUN4RCxzREFBd0M7Ozs7O0lBQ3hDLDhDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBEaXJlY3RpdmUsXHJcbiAgICBIb3N0TGlzdGVuZXIsXHJcbiAgICBFbGVtZW50UmVmLFxyXG4gICAgSW5wdXRcclxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5cclxuaW1wb3J0IHsgS2V5Q29kZSB9IGZyb20gXCIuLi9lbnVtcy9rZXkta29kZVwiO1xyXG5pbXBvcnQgeyBJdGVtTGlzdFNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZXMvaXRlbS1saXN0LnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgQXV0b2NvbXBsZXRlU2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9hdXRvY29tcGxldGUuc2VydmljZVwiO1xyXG5pbXBvcnQgeyBTY3JvbGxTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL3Njcm9sbC1zZXJ2aWNlXCI7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2tleWJvYXJkLW5hdmlnYXRpb25dJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgS2V5Ym9hcmROYXZpZ2F0aW9uRGlyZWN0aXZlIHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2Nyb2xsU2VydmljZTogU2Nyb2xsU2VydmljZTtcclxuXHJcbiAgICBASW5wdXQoKSBzdG9wRW50ZXJQcm9wYWdhdGlvbjogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXV0b2NvbXBsZXRlU2VydmljZTogQXV0b2NvbXBsZXRlU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGl0ZW1MaXN0U2VydmljZTogSXRlbUxpc3RTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZikge1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsU2VydmljZSA9IG5ldyBTY3JvbGxTZXJ2aWNlKGVsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKSBvbktleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICBsZXQga2V5ID0gZXZlbnQud2hpY2ggfHwgZXZlbnQua2V5Q29kZTtcclxuXHJcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcclxuICAgICAgICAgICAgY2FzZSBLZXlDb2RlLkRvd25BcnJvdzpcclxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRG93bktleShldmVudCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBLZXlDb2RlLlVwQXJyb3c6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVVwS2V5KGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEtleUNvZGUuRW50ZXI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUVudGVyKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGhhbmRsZURvd25LZXkoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICB0aGlzLml0ZW1MaXN0U2VydmljZS5hY3RpdmVJbmRleCsrO1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsU2VydmljZS5oYW5kbGVLZXlib2FyT3B0aW9uTmF2aWdhdGlvbih0aGlzLml0ZW1MaXN0U2VydmljZS5hY3RpdmVJbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBoYW5kbGVVcEtleShldmVudDogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgICAgIHRoaXMuaXRlbUxpc3RTZXJ2aWNlLmFjdGl2ZUluZGV4LS07XHJcbiAgICAgICAgdGhpcy5zY3JvbGxTZXJ2aWNlLmhhbmRsZUtleWJvYXJPcHRpb25OYXZpZ2F0aW9uKHRoaXMuaXRlbUxpc3RTZXJ2aWNlLmFjdGl2ZUluZGV4KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGhhbmRsZUVudGVyKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXRlbUxpc3RTZXJ2aWNlLmFjdGl2ZUluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgdGhpcy5hdXRvY29tcGxldGVTZXJ2aWNlLnNlbGVjdEl0ZW1TdWJqZWN0Lm5leHQodGhpcy5pdGVtTGlzdFNlcnZpY2UuYWN0aXZlSW5kZXgpO1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RvcEVudGVyUHJvcGFnYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19