/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import { AutocompleteService } from "./autocomplete.service";
import { DEFAULT_ACTIVE_INDEX } from "../constants/autocomplete.constants";
var ItemListService = /** @class */ (function () {
    function ItemListService(autocompleteService) {
        this.autocompleteService = autocompleteService;
        this._activeIndex = DEFAULT_ACTIVE_INDEX;
        this.items = [];
    }
    Object.defineProperty(ItemListService.prototype, "activeIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this._activeIndex;
        },
        set: /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            if (this.autocompleteService.isOpen) {
                if (index >= this.items.length) {
                    this.restoreIntialActiveIndex();
                    return;
                }
                if (index < DEFAULT_ACTIVE_INDEX) {
                    this._activeIndex = this.items.length - 1;
                    this.autocompleteService.changedHighlightItemSubject.next(this._activeIndex);
                    return;
                }
                this._activeIndex = index;
                this.autocompleteService.changedHighlightItemSubject.next(this._activeIndex);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ItemListService.prototype.restoreIntialActiveIndex = /**
     * @return {?}
     */
    function () {
        this._activeIndex = DEFAULT_ACTIVE_INDEX;
        this.autocompleteService.changedHighlightItemSubject.next(this._activeIndex);
    };
    ItemListService.decorators = [
        { type: Injectable },
    ];
    ItemListService.ctorParameters = function () { return [
        { type: AutocompleteService }
    ]; };
    return ItemListService;
}());
export { ItemListService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ItemListService.prototype._activeIndex;
    /** @type {?} */
    ItemListService.prototype.items;
    /**
     * @type {?}
     * @private
     */
    ItemListService.prototype.autocompleteService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS1saXN0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1yZW1vdGUtYXV0b2NvbXBsZXRlLyIsInNvdXJjZXMiOlsiYXBwL3NlcnZpY2VzL2l0ZW0tbGlzdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzdELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRzNFO0lBRUkseUJBQW9CLG1CQUF3QztRQUF4Qyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBR3BELGlCQUFZLEdBQVcsb0JBQW9CLENBQUM7UUFFN0MsVUFBSyxHQUF1QixFQUFFLENBQUM7SUFKdEMsQ0FBQztJQU1ELHNCQUFJLHdDQUFXOzs7O1FBbUJmO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDN0IsQ0FBQzs7Ozs7UUFyQkQsVUFBZ0IsS0FBYTtZQUN6QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDbEMsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDN0IsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7b0JBQ2hDLE1BQU0sQ0FBQztnQkFDWCxDQUFDO2dCQUdELEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7b0JBQy9CLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO29CQUMxQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsMkJBQTJCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztvQkFDN0UsTUFBTSxDQUFDO2dCQUNYLENBQUM7Z0JBRUQsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7Z0JBQzFCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ2pGLENBQUM7UUFDTCxDQUFDOzs7T0FBQTs7OztJQU1ELGtEQUF3Qjs7O0lBQXhCO1FBQ0ksSUFBSSxDQUFDLFlBQVksR0FBRyxvQkFBb0IsQ0FBQztRQUN6QyxJQUFJLENBQUMsbUJBQW1CLENBQUMsMkJBQTJCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNqRixDQUFDOztnQkFuQ0osVUFBVTs7O2dCQUpGLG1CQUFtQjs7SUF3QzVCLHNCQUFDO0NBQUEsQUFwQ0QsSUFvQ0M7U0FuQ1ksZUFBZTs7Ozs7O0lBSXhCLHVDQUFvRDs7SUFFcEQsZ0NBQXNDOzs7OztJQUwxQiw4Q0FBZ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuXHJcbmltcG9ydCB7IEF1dG9jb21wbGV0ZVNlcnZpY2UgfSBmcm9tIFwiLi9hdXRvY29tcGxldGUuc2VydmljZVwiO1xyXG5pbXBvcnQgeyBERUZBVUxUX0FDVElWRV9JTkRFWCB9IGZyb20gXCIuLi9jb25zdGFudHMvYXV0b2NvbXBsZXRlLmNvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBBdXRvY29tcGxldGVJdGVtIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvYXV0b2NvbXBsZXRlLml0ZW1cIjtcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEl0ZW1MaXN0U2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGF1dG9jb21wbGV0ZVNlcnZpY2U6IEF1dG9jb21wbGV0ZVNlcnZpY2UpIHtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9hY3RpdmVJbmRleDogbnVtYmVyID0gREVGQVVMVF9BQ1RJVkVfSU5ERVg7XHJcblxyXG4gICAgcHVibGljIGl0ZW1zOiBBdXRvY29tcGxldGVJdGVtW10gPSBbXTtcclxuXHJcbiAgICBzZXQgYWN0aXZlSW5kZXgoaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9jb21wbGV0ZVNlcnZpY2UuaXNPcGVuKSB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+PSB0aGlzLml0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXN0b3JlSW50aWFsQWN0aXZlSW5kZXgoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGlmIChpbmRleCA8IERFRkFVTFRfQUNUSVZFX0lOREVYKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVJbmRleCA9IHRoaXMuaXRlbXMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlU2VydmljZS5jaGFuZ2VkSGlnaGxpZ2h0SXRlbVN1YmplY3QubmV4dCh0aGlzLl9hY3RpdmVJbmRleCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZUluZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlU2VydmljZS5jaGFuZ2VkSGlnaGxpZ2h0SXRlbVN1YmplY3QubmV4dCh0aGlzLl9hY3RpdmVJbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBhY3RpdmVJbmRleCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVJbmRleDtcclxuICAgIH1cclxuXHJcbiAgICByZXN0b3JlSW50aWFsQWN0aXZlSW5kZXgoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlSW5kZXggPSBERUZBVUxUX0FDVElWRV9JTkRFWDtcclxuICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZVNlcnZpY2UuY2hhbmdlZEhpZ2hsaWdodEl0ZW1TdWJqZWN0Lm5leHQodGhpcy5fYWN0aXZlSW5kZXgpO1xyXG4gICAgfVxyXG59Il19