import { OnInit, EventEmitter, TemplateRef, OnDestroy, ElementRef } from "@angular/core";
import { ControlValueAccessor } from "@angular/forms";
import { AutocompleteItem } from "../interfaces/autocomplete.item";
import { SearchStateType } from "../enums/search-state.type";
import { ItemListService } from "../services/item-list.service";
import { AutocompleteSourceService } from "../interfaces/autocomplete-source.service";
import { AutocompleteService } from "../services/autocomplete.service";
import { ParameterizedAutocompleteSourceService } from "../interfaces/parameterized-autocomplete-sourse.servise";
import { Autocomplete } from "../interfaces/autocomplete";
import * as ɵngcc0 from '@angular/core';
export declare class RemoteAutocompleteComponent implements OnInit, OnDestroy, ControlValueAccessor, Autocomplete {
    itemListService: ItemListService;
    autocompleteService: AutocompleteService;
    service: AutocompleteSourceService | ParameterizedAutocompleteSourceService;
    minChars: number;
    maxChars: number;
    pause: number;
    inputId: string;
    inputName: string;
    inputClasses: string[];
    disabled: boolean;
    notFoundText: string;
    searchingText: string;
    placeholder: string;
    searchParameters: any;
    autocompleteAttr: string;
    tabindex: number;
    stopEnterPropagationOnSelect: boolean;
    needToShowNotFoundText: boolean;
    needToShowSearchingText: boolean;
    type: EventEmitter<void>;
    highlighted: EventEmitter<AutocompleteItem>;
    selected: EventEmitter<AutocompleteItem>;
    blur: EventEmitter<Event>;
    focusEvent: EventEmitter<Event>;
    optionTemplate: TemplateRef<any>;
    inputField: ElementRef;
    searchStates: typeof SearchStateType;
    searchState: SearchStateType;
    searchValue: string;
    searchResult: AutocompleteItem[];
    SEARCH_WRAPPER_CLASS: string;
    OPTION_LIST_WRAPPER_CLASS: string;
    OPTION_CLASS: string;
    OPTION_VALUE_CLASS: string;
    OPTION_DESCRIPTION_CLASS: string;
    LOADING_CLASS: string;
    RESULTS_NOT_FOUND_CLASS: string;
    private typingTimeout;
    private originalSearchValue;
    private changedHighlightSubscription;
    private selectSubscription;
    private propagateChange;
    private propagateTouched;
    constructor(itemListService: ItemListService, autocompleteService: AutocompleteService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    onType(): void;
    onInputBlur(event: FocusEvent): void;
    onInputFocus(event: Event): void;
    readonly inputClass: string;
    focus(): void;
    open(): void;
    close(): void;
    private validateService();
    private onActiveIndexChanged(activeIndex);
    private resetSearchTimeout();
    private setSearchTimeout();
    private clearSearchTimeout();
    private search();
    private performSearch();
    private validsearchTerm();
    private isParameterizedSearch(service);
    private getDefaultIfNullOrUndefined<T>(value, defaultValue);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RemoteAutocompleteComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<RemoteAutocompleteComponent, "remote-autocomplete", never, { "stopEnterPropagationOnSelect": "stopEnterPropagationOnSelect"; "needToShowNotFoundText": "needToShowNotFoundText"; "needToShowSearchingText": "needToShowSearchingText"; "disabled": "disabled"; "minChars": "minSearchLength"; "maxChars": "maxChars"; "pause": "pause"; "notFoundText": "notFoundText"; "searchingText": "searchingText"; "service": "service"; "inputId": "inputId"; "inputName": "inputName"; "inputClasses": "inputClass"; "placeholder": "placeholder"; "searchParameters": "searchParameters"; "autocompleteAttr": "autocompleteAttr"; "tabindex": "tabindex"; }, { "type": "type"; "highlighted": "highlighted"; "selected": "selected"; "blur": "blur"; "focusEvent": "focus"; }, ["optionTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2NvbXBsZXRlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJhdXRvY29tcGxldGUuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmLCBPbkRlc3Ryb3ksIEVsZW1lbnRSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5pbXBvcnQgeyBBdXRvY29tcGxldGVJdGVtIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvYXV0b2NvbXBsZXRlLml0ZW1cIjtcclxuaW1wb3J0IHsgU2VhcmNoU3RhdGVUeXBlIH0gZnJvbSBcIi4uL2VudW1zL3NlYXJjaC1zdGF0ZS50eXBlXCI7XHJcbmltcG9ydCB7IEl0ZW1MaXN0U2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9pdGVtLWxpc3Quc2VydmljZVwiO1xyXG5pbXBvcnQgeyBBdXRvY29tcGxldGVTb3VyY2VTZXJ2aWNlIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvYXV0b2NvbXBsZXRlLXNvdXJjZS5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IEF1dG9jb21wbGV0ZVNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZXMvYXV0b2NvbXBsZXRlLnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgUGFyYW1ldGVyaXplZEF1dG9jb21wbGV0ZVNvdXJjZVNlcnZpY2UgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9wYXJhbWV0ZXJpemVkLWF1dG9jb21wbGV0ZS1zb3Vyc2Uuc2VydmlzZVwiO1xyXG5pbXBvcnQgeyBBdXRvY29tcGxldGUgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9hdXRvY29tcGxldGVcIjtcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUmVtb3RlQXV0b2NvbXBsZXRlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBBdXRvY29tcGxldGUge1xyXG4gICAgaXRlbUxpc3RTZXJ2aWNlOiBJdGVtTGlzdFNlcnZpY2U7XHJcbiAgICBhdXRvY29tcGxldGVTZXJ2aWNlOiBBdXRvY29tcGxldGVTZXJ2aWNlO1xyXG4gICAgc2VydmljZTogQXV0b2NvbXBsZXRlU291cmNlU2VydmljZSB8IFBhcmFtZXRlcml6ZWRBdXRvY29tcGxldGVTb3VyY2VTZXJ2aWNlO1xyXG4gICAgbWluQ2hhcnM6IG51bWJlcjtcclxuICAgIG1heENoYXJzOiBudW1iZXI7XHJcbiAgICBwYXVzZTogbnVtYmVyO1xyXG4gICAgaW5wdXRJZDogc3RyaW5nO1xyXG4gICAgaW5wdXROYW1lOiBzdHJpbmc7XHJcbiAgICBpbnB1dENsYXNzZXM6IHN0cmluZ1tdO1xyXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICBub3RGb3VuZFRleHQ6IHN0cmluZztcclxuICAgIHNlYXJjaGluZ1RleHQ6IHN0cmluZztcclxuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XHJcbiAgICBzZWFyY2hQYXJhbWV0ZXJzOiBhbnk7XHJcbiAgICBhdXRvY29tcGxldGVBdHRyOiBzdHJpbmc7XHJcbiAgICB0YWJpbmRleDogbnVtYmVyO1xyXG4gICAgc3RvcEVudGVyUHJvcGFnYXRpb25PblNlbGVjdDogYm9vbGVhbjtcclxuICAgIG5lZWRUb1Nob3dOb3RGb3VuZFRleHQ6IGJvb2xlYW47XHJcbiAgICBuZWVkVG9TaG93U2VhcmNoaW5nVGV4dDogYm9vbGVhbjtcclxuICAgIHR5cGU6IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuICAgIGhpZ2hsaWdodGVkOiBFdmVudEVtaXR0ZXI8QXV0b2NvbXBsZXRlSXRlbT47XHJcbiAgICBzZWxlY3RlZDogRXZlbnRFbWl0dGVyPEF1dG9jb21wbGV0ZUl0ZW0+O1xyXG4gICAgYmx1cjogRXZlbnRFbWl0dGVyPEV2ZW50PjtcclxuICAgIGZvY3VzRXZlbnQ6IEV2ZW50RW1pdHRlcjxFdmVudD47XHJcbiAgICBvcHRpb25UZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcclxuICAgIGlucHV0RmllbGQ6IEVsZW1lbnRSZWY7XHJcbiAgICBzZWFyY2hTdGF0ZXM6IHR5cGVvZiBTZWFyY2hTdGF0ZVR5cGU7XHJcbiAgICBzZWFyY2hTdGF0ZTogU2VhcmNoU3RhdGVUeXBlO1xyXG4gICAgc2VhcmNoVmFsdWU6IHN0cmluZztcclxuICAgIHNlYXJjaFJlc3VsdDogQXV0b2NvbXBsZXRlSXRlbVtdO1xyXG4gICAgU0VBUkNIX1dSQVBQRVJfQ0xBU1M6IHN0cmluZztcclxuICAgIE9QVElPTl9MSVNUX1dSQVBQRVJfQ0xBU1M6IHN0cmluZztcclxuICAgIE9QVElPTl9DTEFTUzogc3RyaW5nO1xyXG4gICAgT1BUSU9OX1ZBTFVFX0NMQVNTOiBzdHJpbmc7XHJcbiAgICBPUFRJT05fREVTQ1JJUFRJT05fQ0xBU1M6IHN0cmluZztcclxuICAgIExPQURJTkdfQ0xBU1M6IHN0cmluZztcclxuICAgIFJFU1VMVFNfTk9UX0ZPVU5EX0NMQVNTOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHR5cGluZ1RpbWVvdXQ7XHJcbiAgICBwcml2YXRlIG9yaWdpbmFsU2VhcmNoVmFsdWU7XHJcbiAgICBwcml2YXRlIGNoYW5nZWRIaWdobGlnaHRTdWJzY3JpcHRpb247XHJcbiAgICBwcml2YXRlIHNlbGVjdFN1YnNjcmlwdGlvbjtcclxuICAgIHByaXZhdGUgcHJvcGFnYXRlQ2hhbmdlO1xyXG4gICAgcHJpdmF0ZSBwcm9wYWdhdGVUb3VjaGVkO1xyXG4gICAgY29uc3RydWN0b3IoaXRlbUxpc3RTZXJ2aWNlOiBJdGVtTGlzdFNlcnZpY2UsIGF1dG9jb21wbGV0ZVNlcnZpY2U6IEF1dG9jb21wbGV0ZVNlcnZpY2UpO1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xyXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcclxuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xyXG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZDtcclxuICAgIG9uVHlwZSgpOiB2b2lkO1xyXG4gICAgb25JbnB1dEJsdXIoZXZlbnQ6IEZvY3VzRXZlbnQpOiB2b2lkO1xyXG4gICAgb25JbnB1dEZvY3VzKGV2ZW50OiBFdmVudCk6IHZvaWQ7XHJcbiAgICByZWFkb25seSBpbnB1dENsYXNzOiBzdHJpbmc7XHJcbiAgICBmb2N1cygpOiB2b2lkO1xyXG4gICAgb3BlbigpOiB2b2lkO1xyXG4gICAgY2xvc2UoKTogdm9pZDtcclxuICAgIHByaXZhdGUgdmFsaWRhdGVTZXJ2aWNlKCk7XHJcbiAgICBwcml2YXRlIG9uQWN0aXZlSW5kZXhDaGFuZ2VkKGFjdGl2ZUluZGV4KTtcclxuICAgIHByaXZhdGUgcmVzZXRTZWFyY2hUaW1lb3V0KCk7XHJcbiAgICBwcml2YXRlIHNldFNlYXJjaFRpbWVvdXQoKTtcclxuICAgIHByaXZhdGUgY2xlYXJTZWFyY2hUaW1lb3V0KCk7XHJcbiAgICBwcml2YXRlIHNlYXJjaCgpO1xyXG4gICAgcHJpdmF0ZSBwZXJmb3JtU2VhcmNoKCk7XHJcbiAgICBwcml2YXRlIHZhbGlkc2VhcmNoVGVybSgpO1xyXG4gICAgcHJpdmF0ZSBpc1BhcmFtZXRlcml6ZWRTZWFyY2goc2VydmljZSk7XHJcbiAgICBwcml2YXRlIGdldERlZmF1bHRJZk51bGxPclVuZGVmaW5lZDxUPih2YWx1ZSwgZGVmYXVsdFZhbHVlKTtcclxufVxyXG4iXX0=