/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ContentChild, TemplateRef, forwardRef, ViewChild, ElementRef } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { DEFAULT_MAX_CHARS, DEFAULT_MIN_SEARCH_LENGTH, DEFAULT_PAUSE, NOT_FOUND_TEXT, SEARCHING_TEXT, DEFAULT_ACTIVE_INDEX, SEARCH_WRAPPER_CLASS, OPTION_LIST_WRAPPER_CLASS, OPTION_CLASS, OPTION_VALUE_CLASS, OPTION_DESCRIPTION_CLASS, LOADING_CLASS, RESULTS_NOT_FOUND_CLASS } from "../constants/autocomplete.constants";
import { SearchStateType } from "../enums/search-state.type";
import { OptionTemplateDirective } from "../directives/option-template.directive";
import { ItemListService } from "../services/item-list.service";
import { AutocompleteService } from "../services/autocomplete.service";
export class RemoteAutocompleteComponent {
    /**
     * @param {?} itemListService
     * @param {?} autocompleteService
     */
    constructor(itemListService, autocompleteService) {
        this.itemListService = itemListService;
        this.autocompleteService = autocompleteService;
        this.stopEnterPropagationOnSelect = false;
        this.needToShowNotFoundText = true;
        this.needToShowSearchingText = true;
        this.type = new EventEmitter();
        this.highlighted = new EventEmitter();
        this.selected = new EventEmitter();
        this.blur = new EventEmitter();
        this.focusEvent = new EventEmitter();
        this.searchStates = SearchStateType;
        this.searchState = SearchStateType.Untracked;
        this.SEARCH_WRAPPER_CLASS = SEARCH_WRAPPER_CLASS;
        this.OPTION_LIST_WRAPPER_CLASS = OPTION_LIST_WRAPPER_CLASS;
        this.OPTION_CLASS = OPTION_CLASS;
        this.OPTION_VALUE_CLASS = OPTION_VALUE_CLASS;
        this.OPTION_DESCRIPTION_CLASS = OPTION_DESCRIPTION_CLASS;
        this.LOADING_CLASS = LOADING_CLASS;
        this.RESULTS_NOT_FOUND_CLASS = RESULTS_NOT_FOUND_CLASS;
        this.propagateChange = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => { });
        this.propagateTouched = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => { });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.validateService();
        this.disabled = this.getDefaultIfNullOrUndefined(this.disabled, false);
        this.minChars = this.getDefaultIfNullOrUndefined(this.minChars, DEFAULT_MIN_SEARCH_LENGTH);
        this.maxChars = this.maxChars || DEFAULT_MAX_CHARS;
        this.pause = this.pause || DEFAULT_PAUSE;
        this.notFoundText = this.notFoundText || NOT_FOUND_TEXT;
        this.searchingText = this.searchingText || SEARCHING_TEXT;
        this.changedHighlightSubscription = this.autocompleteService.changedHighlightItemSubject.subscribe((/**
         * @param {?} index
         * @return {?}
         */
        (index) => {
            this.onActiveIndexChanged(index);
        }));
        this.selectSubscription = this.autocompleteService.selectItemSubject.subscribe((/**
         * @param {?} index
         * @return {?}
         */
        (index) => {
            /** @type {?} */
            const result = this.searchResult[index];
            this.propagateChange(result.value);
            this.selected.emit(result);
            this.close();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.changedHighlightSubscription.unsubscribe();
        this.selectSubscription.unsubscribe();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== undefined) {
            this.searchValue = value;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.propagateTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @return {?}
     */
    onType() {
        this.propagateChange(this.searchValue);
        this.originalSearchValue = this.searchValue;
        this.type.emit();
        if (this.validsearchTerm()) {
            this.searchState = this.searchStates.Loading;
        }
        else {
            this.close();
        }
        this.resetSearchTimeout();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onInputBlur(event) {
        if (event.relatedTarget) {
            /** @type {?} */
            let related = (/** @type {?} */ (event.relatedTarget));
            if (related.classList.contains(this.OPTION_CLASS)) {
                return;
            }
        }
        this.propagateTouched(this.searchValue);
        this.close();
        this.blur.emit(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onInputFocus(event) {
        this.focusEvent.emit(event);
    }
    /**
     * @return {?}
     */
    get inputClass() {
        /** @type {?} */
        let classes = '';
        if (this.inputClasses) {
            classes = this.inputClasses.join(' ');
        }
        return classes;
    }
    /**
     * @return {?}
     */
    focus() {
        ((/** @type {?} */ (this.inputField.nativeElement))).focus();
    }
    /**
     * @return {?}
     */
    open() {
        this.onType();
    }
    /**
     * @return {?}
     */
    close() {
        this.autocompleteService.isOpen = false;
        this.searchState = this.searchStates.Untracked;
    }
    /**
     * @private
     * @return {?}
     */
    validateService() {
        if (!this.service) {
            throw new Error("AutocompleteService must be implemented");
        }
        if (this.isParameterizedSearch(this.service) && (this.searchParameters === undefined || this.searchParameters === null)) {
            throw new Error("Please provide additionalSearchParams or just provide AutocompleteSourceService instaead of ParameterizedAutocompleteSourceService");
        }
    }
    /**
     * @private
     * @param {?} activeIndex
     * @return {?}
     */
    onActiveIndexChanged(activeIndex) {
        /** @type {?} */
        let highlightedItem;
        if (activeIndex === DEFAULT_ACTIVE_INDEX) {
            highlightedItem = null;
            this.searchValue = this.originalSearchValue;
        }
        else {
            highlightedItem = this.searchResult[activeIndex];
            this.searchValue = highlightedItem.value;
        }
        this.propagateChange(this.searchValue);
        this.highlighted.emit(highlightedItem);
    }
    /**
     * @private
     * @return {?}
     */
    resetSearchTimeout() {
        this.clearSearchTimeout();
        this.setSearchTimeout();
    }
    /**
     * @private
     * @return {?}
     */
    setSearchTimeout() {
        this.typingTimeout = setTimeout(this.search.bind(this), this.pause);
    }
    /**
     * @private
     * @return {?}
     */
    clearSearchTimeout() {
        clearTimeout(this.typingTimeout);
    }
    /**
     * @private
     * @return {?}
     */
    search() {
        this.itemListService.restoreIntialActiveIndex();
        if (this.validsearchTerm()) {
            this.performSearch().first().subscribe((/**
             * @param {?} results
             * @return {?}
             */
            (results) => {
                if (this.searchState !== this.searchStates.Untracked) {
                    this.autocompleteService.isOpen = results.length > 0;
                    this.itemListService.items = results;
                    this.searchResult = results;
                    this.searchState = this.searchStates.Finished;
                }
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    performSearch() {
        if (this.isParameterizedSearch(this.service)) {
            return ((/** @type {?} */ (this.service))).getWithParams(this.searchValue, this.searchParameters);
        }
        else {
            return ((/** @type {?} */ (this.service))).get(this.searchValue);
        }
    }
    /**
     * @private
     * @return {?}
     */
    validsearchTerm() {
        return (this.searchValue || '').length >= this.minChars;
    }
    /**
     * @private
     * @param {?} service
     * @return {?}
     */
    isParameterizedSearch(service) {
        return ((/** @type {?} */ (service))).getWithParams !== undefined;
    }
    /**
     * @private
     * @template T
     * @param {?} value
     * @param {?} defaultValue
     * @return {?}
     */
    getDefaultIfNullOrUndefined(value, defaultValue) {
        return value === undefined || value === null
            ? defaultValue
            : value;
    }
}
RemoteAutocompleteComponent.decorators = [
    { type: Component, args: [{
                selector: 'remote-autocomplete',
                template: `<div keyboard-navigation [stopEnterPropagation]="stopEnterPropagationOnSelect" class="remote-autocomplete">
    <input [(ngModel)]="searchValue"
           [attr.id]="inputId"
           [attr.name]="inputName"
           [attr.class]="inputClass"
           [disabled]="disabled"
           [attr.placeholder]="placeholder"
           [attr.autocomplete]="autocompleteAttr"
           [attr.tabindex]="tabindex"
           maxlength="{{maxChars}}"
           (input)="onType()"
           (blur)="onInputBlur($event)"
           (focus)="onInputFocus($event)"
           #input />
    <div *ngIf="searchState === searchStates.Loading && needToShowSearchingText || 
                searchState === searchStates.Finished && (searchResult?.length > 0 || needToShowNotFoundText)" [class]="SEARCH_WRAPPER_CLASS">
        <div *ngIf="searchState === searchStates.Loading">
            <span [class]="LOADING_CLASS">{{searchingText}}</span>
        </div>

        <div *ngIf="searchState === searchStates.Finished && searchResult.length === 0">
            <span [class]="RESULTS_NOT_FOUND_CLASS">{{notFoundText}}</span>
        </div>

        <div *ngIf="searchState === searchStates.Finished && searchResult?.length > 0" [class]="OPTION_LIST_WRAPPER_CLASS">
            <div *ngFor="let item of searchResult; index as i"
                 remote-autocomplete-option
                 [itemIndex]="i"
                 [class]="OPTION_CLASS"
                 [ngClass]="{'autocomplete-option-active': i === itemListService.activeIndex}"
                 tabindex="-1">
                <ng-template #defaultOptionTemplate>
                    <span [class]="OPTION_VALUE_CLASS">{{item.value}}</span>
                    <span *ngIf="item.description" [class]="OPTION_DESCRIPTION_CLASS">{{item.description}}</span>
                </ng-template>

                <ng-template [ngTemplateOutlet]="optionTemplate || defaultOptionTemplate" [ngTemplateOutletContext]="{ $implicit: item }">
                </ng-template>
            </div>
        </div>
    </div>
</div>`,
                styles: [`.autocomplete-search-wrapper{border:1px solid #ccc;max-height:200px;overflow:auto;max-width:200px}.autocomplete-option-active{background-color:#d3d3d3}`],
                providers: [
                    AutocompleteService,
                    ItemListService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => RemoteAutocompleteComponent)),
                        multi: true
                    }
                ]
            },] },
];
RemoteAutocompleteComponent.ctorParameters = () => [
    { type: ItemListService },
    { type: AutocompleteService }
];
RemoteAutocompleteComponent.propDecorators = {
    service: [{ type: Input, args: ['service',] }],
    minChars: [{ type: Input, args: ['minSearchLength',] }],
    maxChars: [{ type: Input, args: ['maxChars',] }],
    pause: [{ type: Input, args: ['pause',] }],
    inputId: [{ type: Input, args: ['inputId',] }],
    inputName: [{ type: Input, args: ['inputName',] }],
    inputClasses: [{ type: Input, args: ['inputClass',] }],
    disabled: [{ type: Input, args: ['disabled',] }],
    notFoundText: [{ type: Input, args: ['notFoundText',] }],
    searchingText: [{ type: Input, args: ['searchingText',] }],
    placeholder: [{ type: Input, args: ['placeholder',] }],
    searchParameters: [{ type: Input, args: ['searchParameters',] }],
    autocompleteAttr: [{ type: Input, args: ['autocompleteAttr',] }],
    tabindex: [{ type: Input, args: ['tabindex',] }],
    stopEnterPropagationOnSelect: [{ type: Input, args: ['stopEnterPropagationOnSelect',] }],
    needToShowNotFoundText: [{ type: Input, args: ['needToShowNotFoundText',] }],
    needToShowSearchingText: [{ type: Input, args: ['needToShowSearchingText',] }],
    type: [{ type: Output, args: ['type',] }],
    highlighted: [{ type: Output, args: ['highlighted',] }],
    selected: [{ type: Output, args: ['selected',] }],
    blur: [{ type: Output, args: ['blur',] }],
    focusEvent: [{ type: Output, args: ['focus',] }],
    optionTemplate: [{ type: ContentChild, args: [OptionTemplateDirective, { read: TemplateRef },] }],
    inputField: [{ type: ViewChild, args: ['input',] }]
};
if (false) {
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.service;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.minChars;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.maxChars;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.pause;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.inputId;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.inputName;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.inputClasses;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.disabled;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.notFoundText;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.searchingText;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.placeholder;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.searchParameters;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.autocompleteAttr;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.tabindex;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.stopEnterPropagationOnSelect;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.needToShowNotFoundText;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.needToShowSearchingText;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.type;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.highlighted;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.selected;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.blur;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.focusEvent;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.optionTemplate;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.inputField;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.searchStates;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.searchState;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.searchValue;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.searchResult;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.SEARCH_WRAPPER_CLASS;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.OPTION_LIST_WRAPPER_CLASS;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.OPTION_CLASS;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.OPTION_VALUE_CLASS;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.OPTION_DESCRIPTION_CLASS;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.LOADING_CLASS;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.RESULTS_NOT_FOUND_CLASS;
    /**
     * @type {?}
     * @private
     */
    RemoteAutocompleteComponent.prototype.typingTimeout;
    /**
     * @type {?}
     * @private
     */
    RemoteAutocompleteComponent.prototype.originalSearchValue;
    /**
     * @type {?}
     * @private
     */
    RemoteAutocompleteComponent.prototype.changedHighlightSubscription;
    /**
     * @type {?}
     * @private
     */
    RemoteAutocompleteComponent.prototype.selectSubscription;
    /**
     * @type {?}
     * @private
     */
    RemoteAutocompleteComponent.prototype.propagateChange;
    /**
     * @type {?}
     * @private
     */
    RemoteAutocompleteComponent.prototype.propagateTouched;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.itemListService;
    /** @type {?} */
    RemoteAutocompleteComponent.prototype.autocompleteService;
}
//# sourceMappingURL=data:application/json;base64,