/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Directive } from "@angular/core";
import { ItemListService } from "../services/item-list.service";
import { AutocompleteService } from "../services/autocomplete.service";
export class OptionDirective {
    /**
     * @param {?} autocompleteService
     * @param {?} itemListService
     */
    constructor(autocompleteService, itemListService) {
        this.autocompleteService = autocompleteService;
        this.itemListService = itemListService;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.itemListService.activeIndex = this.index;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        this.itemListService.restoreIntialActiveIndex();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        this.autocompleteService.selectItemSubject.next(this.index);
    }
}
OptionDirective.decorators = [
    { type: Directive, args: [{
                selector: '[remote-autocomplete-option]',
                host: {
                    '(mouseenter)': 'onMouseEnter($event)',
                    '(mouseleave)': 'onMouseLeave($event)',
                    '(click)': 'onClick($event)'
                }
            },] },
];
OptionDirective.ctorParameters = () => [
    { type: AutocompleteService },
    { type: ItemListService }
];
OptionDirective.propDecorators = {
    index: [{ type: Input, args: ['itemIndex',] }]
};
if (false) {
    /** @type {?} */
    OptionDirective.prototype.index;
    /**
     * @type {?}
     * @private
     */
    OptionDirective.prototype.autocompleteService;
    /**
     * @type {?}
     * @private
     */
    OptionDirective.prototype.itemListService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLWRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXJlbW90ZS1hdXRvY29tcGxldGUvIiwic291cmNlcyI6WyJhcHAvZGlyZWN0aXZlcy9vcHRpb24tZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0gsS0FBSyxFQUNMLFNBQVMsRUFFWixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDaEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFVdkUsTUFBTTs7Ozs7SUFHRixZQUFvQixtQkFBd0MsRUFDaEQsZUFBZ0M7UUFEeEIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUNoRCxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7SUFDNUMsQ0FBQzs7Ozs7SUFFRCxZQUFZLENBQUMsS0FBaUI7UUFDMUIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNsRCxDQUFDOzs7OztJQUVELFlBQVksQ0FBQyxLQUFpQjtRQUMxQixJQUFJLENBQUMsZUFBZSxDQUFDLHdCQUF3QixFQUFFLENBQUM7SUFDcEQsQ0FBQzs7Ozs7SUFFRCxPQUFPLENBQUMsS0FBaUI7UUFDckIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEUsQ0FBQzs7O1lBekJKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsOEJBQThCO2dCQUN4QyxJQUFJLEVBQUU7b0JBQ0YsY0FBYyxFQUFFLHNCQUFzQjtvQkFDdEMsY0FBYyxFQUFFLHNCQUFzQjtvQkFDdEMsU0FBUyxFQUFFLGlCQUFpQjtpQkFDL0I7YUFDSjs7O1lBVFEsbUJBQW1CO1lBRG5CLGVBQWU7OztvQkFZbkIsS0FBSyxTQUFDLFdBQVc7Ozs7SUFBbEIsZ0NBQTBCOzs7OztJQUVkLDhDQUFnRDs7Ozs7SUFDeEQsMENBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIElucHV0LFxyXG4gICAgRGlyZWN0aXZlLFxyXG4gICAgSG9zdExpc3RlbmVyXHJcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuXHJcbmltcG9ydCB7IEl0ZW1MaXN0U2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9pdGVtLWxpc3Quc2VydmljZVwiO1xyXG5pbXBvcnQgeyBBdXRvY29tcGxldGVTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2F1dG9jb21wbGV0ZS5zZXJ2aWNlXCI7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW3JlbW90ZS1hdXRvY29tcGxldGUtb3B0aW9uXScsXHJcbiAgICBob3N0OiB7XHJcbiAgICAgICAgJyhtb3VzZWVudGVyKSc6ICdvbk1vdXNlRW50ZXIoJGV2ZW50KScsXHJcbiAgICAgICAgJyhtb3VzZWxlYXZlKSc6ICdvbk1vdXNlTGVhdmUoJGV2ZW50KScsXHJcbiAgICAgICAgJyhjbGljayknOiAnb25DbGljaygkZXZlbnQpJ1xyXG4gICAgfVxyXG59KVxyXG5leHBvcnQgY2xhc3MgT3B0aW9uRGlyZWN0aXZlIHtcclxuICAgIEBJbnB1dCgnaXRlbUluZGV4JykgaW5kZXg7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhdXRvY29tcGxldGVTZXJ2aWNlOiBBdXRvY29tcGxldGVTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgaXRlbUxpc3RTZXJ2aWNlOiBJdGVtTGlzdFNlcnZpY2UpIHtcclxuICAgIH1cclxuXHJcbiAgICBvbk1vdXNlRW50ZXIoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICB0aGlzLml0ZW1MaXN0U2VydmljZS5hY3RpdmVJbmRleCA9IHRoaXMuaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgb25Nb3VzZUxlYXZlKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5pdGVtTGlzdFNlcnZpY2UucmVzdG9yZUludGlhbEFjdGl2ZUluZGV4KCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25DbGljayhldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlU2VydmljZS5zZWxlY3RJdGVtU3ViamVjdC5uZXh0KHRoaXMuaW5kZXgpO1xyXG4gICAgfVxyXG59Il19