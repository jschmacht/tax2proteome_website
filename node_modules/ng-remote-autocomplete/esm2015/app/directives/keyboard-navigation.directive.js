/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, ElementRef, Input } from "@angular/core";
import { KeyCode } from "../enums/key-kode";
import { ItemListService } from "../services/item-list.service";
import { AutocompleteService } from "../services/autocomplete.service";
import { ScrollService } from "../services/scroll-service";
export class KeyboardNavigationDirective {
    /**
     * @param {?} autocompleteService
     * @param {?} itemListService
     * @param {?} element
     */
    constructor(autocompleteService, itemListService, element) {
        this.autocompleteService = autocompleteService;
        this.itemListService = itemListService;
        this.element = element;
        this.stopEnterPropagation = false;
        this.scrollService = new ScrollService(element);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeydown(event) {
        /** @type {?} */
        let key = event.which || event.keyCode;
        switch (key) {
            case KeyCode.DownArrow:
                this.handleDownKey(event);
                break;
            case KeyCode.UpArrow:
                this.handleUpKey(event);
                break;
            case KeyCode.Enter:
                this.handleEnter(event);
                break;
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    handleDownKey(event) {
        this.itemListService.activeIndex++;
        this.scrollService.handleKeyboarOptionNavigation(this.itemListService.activeIndex);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    handleUpKey(event) {
        this.itemListService.activeIndex--;
        this.scrollService.handleKeyboarOptionNavigation(this.itemListService.activeIndex);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    handleEnter(event) {
        if (this.itemListService.activeIndex >= 0) {
            this.autocompleteService.selectItemSubject.next(this.itemListService.activeIndex);
            event.preventDefault();
            if (this.stopEnterPropagation) {
                event.stopPropagation();
            }
        }
    }
}
KeyboardNavigationDirective.decorators = [
    { type: Directive, args: [{
                selector: '[keyboard-navigation]'
            },] },
];
KeyboardNavigationDirective.ctorParameters = () => [
    { type: AutocompleteService },
    { type: ItemListService },
    { type: ElementRef }
];
KeyboardNavigationDirective.propDecorators = {
    stopEnterPropagation: [{ type: Input }],
    onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    KeyboardNavigationDirective.prototype.scrollService;
    /** @type {?} */
    KeyboardNavigationDirective.prototype.stopEnterPropagation;
    /**
     * @type {?}
     * @private
     */
    KeyboardNavigationDirective.prototype.autocompleteService;
    /**
     * @type {?}
     * @private
     */
    KeyboardNavigationDirective.prototype.itemListService;
    /**
     * @type {?}
     * @private
     */
    KeyboardNavigationDirective.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQtbmF2aWdhdGlvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1yZW1vdGUtYXV0b2NvbXBsZXRlLyIsInNvdXJjZXMiOlsiYXBwL2RpcmVjdGl2ZXMva2V5Ym9hcmQtbmF2aWdhdGlvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsWUFBWSxFQUNaLFVBQVUsRUFDVixLQUFLLEVBQ1IsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFLM0QsTUFBTTs7Ozs7O0lBS0YsWUFBb0IsbUJBQXdDLEVBQ2hELGVBQWdDLEVBQ2hDLE9BQW1CO1FBRlgsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUNoRCxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUp0Qix5QkFBb0IsR0FBWSxLQUFLLENBQUM7UUFLM0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwRCxDQUFDOzs7OztJQUVvQyxTQUFTLENBQUMsS0FBb0I7O1lBQzNELEdBQUcsR0FBRyxLQUFLLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxPQUFPO1FBRXRDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDVixLQUFLLE9BQU8sQ0FBQyxTQUFTO2dCQUNsQixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMxQixLQUFLLENBQUM7WUFDVixLQUFLLE9BQU8sQ0FBQyxPQUFPO2dCQUNoQixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN4QixLQUFLLENBQUM7WUFDVixLQUFLLE9BQU8sQ0FBQyxLQUFLO2dCQUNkLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3hCLEtBQUssQ0FBQztRQUNkLENBQUM7SUFDTCxDQUFDOzs7Ozs7SUFFTyxhQUFhLENBQUMsS0FBb0I7UUFDdEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsYUFBYSxDQUFDLDZCQUE2QixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdkYsQ0FBQzs7Ozs7O0lBRU8sV0FBVyxDQUFDLEtBQW9CO1FBQ3BDLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7Ozs7OztJQUVPLFdBQVcsQ0FBQyxLQUFvQjtRQUNwQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNsRixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFFdkIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQztnQkFDNUIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQzVCLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQzs7O1lBakRKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsdUJBQXVCO2FBQ3BDOzs7WUFMUSxtQkFBbUI7WUFEbkIsZUFBZTtZQUxwQixVQUFVOzs7bUNBZVQsS0FBSzt3QkFRTCxZQUFZLFNBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDOzs7Ozs7O0lBVm5DLG9EQUE4Qzs7SUFFOUMsMkRBQStDOzs7OztJQUVuQywwREFBZ0Q7Ozs7O0lBQ3hELHNEQUF3Qzs7Ozs7SUFDeEMsOENBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIERpcmVjdGl2ZSxcclxuICAgIEhvc3RMaXN0ZW5lcixcclxuICAgIEVsZW1lbnRSZWYsXHJcbiAgICBJbnB1dFxyXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcblxyXG5pbXBvcnQgeyBLZXlDb2RlIH0gZnJvbSBcIi4uL2VudW1zL2tleS1rb2RlXCI7XHJcbmltcG9ydCB7IEl0ZW1MaXN0U2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9pdGVtLWxpc3Quc2VydmljZVwiO1xyXG5pbXBvcnQgeyBBdXRvY29tcGxldGVTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2F1dG9jb21wbGV0ZS5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IFNjcm9sbFNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZXMvc2Nyb2xsLXNlcnZpY2VcIjtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdba2V5Ym9hcmQtbmF2aWdhdGlvbl0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBLZXlib2FyZE5hdmlnYXRpb25EaXJlY3RpdmUge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBzY3JvbGxTZXJ2aWNlOiBTY3JvbGxTZXJ2aWNlO1xyXG5cclxuICAgIEBJbnB1dCgpIHN0b3BFbnRlclByb3BhZ2F0aW9uOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhdXRvY29tcGxldGVTZXJ2aWNlOiBBdXRvY29tcGxldGVTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgaXRlbUxpc3RTZXJ2aWNlOiBJdGVtTGlzdFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmKSB7XHJcbiAgICAgICAgdGhpcy5zY3JvbGxTZXJ2aWNlID0gbmV3IFNjcm9sbFNlcnZpY2UoZWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pIG9uS2V5ZG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgICAgIGxldCBrZXkgPSBldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKGtleSkge1xyXG4gICAgICAgICAgICBjYXNlIEtleUNvZGUuRG93bkFycm93OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVEb3duS2V5KGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEtleUNvZGUuVXBBcnJvdzpcclxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlVXBLZXkoZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgS2V5Q29kZS5FbnRlcjpcclxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRW50ZXIoZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaGFuZGxlRG93bktleShldmVudDogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgICAgIHRoaXMuaXRlbUxpc3RTZXJ2aWNlLmFjdGl2ZUluZGV4Kys7XHJcbiAgICAgICAgdGhpcy5zY3JvbGxTZXJ2aWNlLmhhbmRsZUtleWJvYXJPcHRpb25OYXZpZ2F0aW9uKHRoaXMuaXRlbUxpc3RTZXJ2aWNlLmFjdGl2ZUluZGV4KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGhhbmRsZVVwS2V5KGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5pdGVtTGlzdFNlcnZpY2UuYWN0aXZlSW5kZXgtLTtcclxuICAgICAgICB0aGlzLnNjcm9sbFNlcnZpY2UuaGFuZGxlS2V5Ym9hck9wdGlvbk5hdmlnYXRpb24odGhpcy5pdGVtTGlzdFNlcnZpY2UuYWN0aXZlSW5kZXgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaGFuZGxlRW50ZXIoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5pdGVtTGlzdFNlcnZpY2UuYWN0aXZlSW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZVNlcnZpY2Uuc2VsZWN0SXRlbVN1YmplY3QubmV4dCh0aGlzLml0ZW1MaXN0U2VydmljZS5hY3RpdmVJbmRleCk7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zdG9wRW50ZXJQcm9wYWdhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=