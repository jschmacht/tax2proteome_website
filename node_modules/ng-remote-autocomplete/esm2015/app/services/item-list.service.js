/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import { AutocompleteService } from "./autocomplete.service";
import { DEFAULT_ACTIVE_INDEX } from "../constants/autocomplete.constants";
export class ItemListService {
    /**
     * @param {?} autocompleteService
     */
    constructor(autocompleteService) {
        this.autocompleteService = autocompleteService;
        this._activeIndex = DEFAULT_ACTIVE_INDEX;
        this.items = [];
    }
    /**
     * @param {?} index
     * @return {?}
     */
    set activeIndex(index) {
        if (this.autocompleteService.isOpen) {
            if (index >= this.items.length) {
                this.restoreIntialActiveIndex();
                return;
            }
            if (index < DEFAULT_ACTIVE_INDEX) {
                this._activeIndex = this.items.length - 1;
                this.autocompleteService.changedHighlightItemSubject.next(this._activeIndex);
                return;
            }
            this._activeIndex = index;
            this.autocompleteService.changedHighlightItemSubject.next(this._activeIndex);
        }
    }
    /**
     * @return {?}
     */
    get activeIndex() {
        return this._activeIndex;
    }
    /**
     * @return {?}
     */
    restoreIntialActiveIndex() {
        this._activeIndex = DEFAULT_ACTIVE_INDEX;
        this.autocompleteService.changedHighlightItemSubject.next(this._activeIndex);
    }
}
ItemListService.decorators = [
    { type: Injectable },
];
ItemListService.ctorParameters = () => [
    { type: AutocompleteService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ItemListService.prototype._activeIndex;
    /** @type {?} */
    ItemListService.prototype.items;
    /**
     * @type {?}
     * @private
     */
    ItemListService.prototype.autocompleteService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS1saXN0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1yZW1vdGUtYXV0b2NvbXBsZXRlLyIsInNvdXJjZXMiOlsiYXBwL3NlcnZpY2VzL2l0ZW0tbGlzdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzdELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBSTNFLE1BQU07Ozs7SUFDRixZQUFvQixtQkFBd0M7UUFBeEMsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUdwRCxpQkFBWSxHQUFXLG9CQUFvQixDQUFDO1FBRTdDLFVBQUssR0FBdUIsRUFBRSxDQUFDO0lBSnRDLENBQUM7Ozs7O0lBTUQsSUFBSSxXQUFXLENBQUMsS0FBYTtRQUN6QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNsQyxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztnQkFDaEMsTUFBTSxDQUFDO1lBQ1gsQ0FBQztZQUdELEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7Z0JBQy9CLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO2dCQUMxQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsMkJBQTJCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDN0UsTUFBTSxDQUFDO1lBQ1gsQ0FBQztZQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1lBQzFCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ2pGLENBQUM7SUFDTCxDQUFDOzs7O0lBRUQsSUFBSSxXQUFXO1FBQ1gsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDN0IsQ0FBQzs7OztJQUVELHdCQUF3QjtRQUNwQixJQUFJLENBQUMsWUFBWSxHQUFHLG9CQUFvQixDQUFDO1FBQ3pDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2pGLENBQUM7OztZQW5DSixVQUFVOzs7WUFKRixtQkFBbUI7Ozs7Ozs7SUFTeEIsdUNBQW9EOztJQUVwRCxnQ0FBc0M7Ozs7O0lBTDFCLDhDQUFnRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5cclxuaW1wb3J0IHsgQXV0b2NvbXBsZXRlU2VydmljZSB9IGZyb20gXCIuL2F1dG9jb21wbGV0ZS5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IERFRkFVTFRfQUNUSVZFX0lOREVYIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9hdXRvY29tcGxldGUuY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IEF1dG9jb21wbGV0ZUl0ZW0gfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9hdXRvY29tcGxldGUuaXRlbVwiO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgSXRlbUxpc3RTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXV0b2NvbXBsZXRlU2VydmljZTogQXV0b2NvbXBsZXRlU2VydmljZSkge1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2FjdGl2ZUluZGV4OiBudW1iZXIgPSBERUZBVUxUX0FDVElWRV9JTkRFWDtcclxuXHJcbiAgICBwdWJsaWMgaXRlbXM6IEF1dG9jb21wbGV0ZUl0ZW1bXSA9IFtdO1xyXG5cclxuICAgIHNldCBhY3RpdmVJbmRleChpbmRleDogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b2NvbXBsZXRlU2VydmljZS5pc09wZW4pIHtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID49IHRoaXMuaXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3RvcmVJbnRpYWxBY3RpdmVJbmRleCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKGluZGV4IDwgREVGQVVMVF9BQ1RJVkVfSU5ERVgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2ZUluZGV4ID0gdGhpcy5pdGVtcy5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdXRvY29tcGxldGVTZXJ2aWNlLmNoYW5nZWRIaWdobGlnaHRJdGVtU3ViamVjdC5uZXh0KHRoaXMuX2FjdGl2ZUluZGV4KTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fYWN0aXZlSW5kZXggPSBpbmRleDtcclxuICAgICAgICAgICAgdGhpcy5hdXRvY29tcGxldGVTZXJ2aWNlLmNoYW5nZWRIaWdobGlnaHRJdGVtU3ViamVjdC5uZXh0KHRoaXMuX2FjdGl2ZUluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGFjdGl2ZUluZGV4KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZUluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIHJlc3RvcmVJbnRpYWxBY3RpdmVJbmRleCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9hY3RpdmVJbmRleCA9IERFRkFVTFRfQUNUSVZFX0lOREVYO1xyXG4gICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlU2VydmljZS5jaGFuZ2VkSGlnaGxpZ2h0SXRlbVN1YmplY3QubmV4dCh0aGlzLl9hY3RpdmVJbmRleCk7XHJcbiAgICB9XHJcbn0iXX0=