/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { SEARCH_WRAPPER_CLASS, OPTION_CLASS, DEFAULT_ACTIVE_INDEX } from "../constants/autocomplete.constants";
export class ScrollService {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
    }
    /**
     * @param {?} activeIndex
     * @return {?}
     */
    handleKeyboarOptionNavigation(activeIndex) {
        /** @type {?} */
        const autocompleteElement = (/** @type {?} */ (this.element.nativeElement));
        /** @type {?} */
        const listElement = autocompleteElement.querySelector(`.${SEARCH_WRAPPER_CLASS}`);
        if (listElement) {
            if (activeIndex === DEFAULT_ACTIVE_INDEX) {
                listElement.scrollTo(0, 0);
                return;
            }
            /** @type {?} */
            const optionElements = listElement.querySelectorAll(`.${OPTION_CLASS}`);
            /** @type {?} */
            const activeElement = optionElements[activeIndex];
            /** @type {?} */
            const listTop = listElement.getBoundingClientRect().top;
            /** @type {?} */
            const listBottom = listTop + listElement.clientHeight;
            /** @type {?} */
            const elementTop = activeElement.getBoundingClientRect().top;
            /** @type {?} */
            const elementBottom = elementTop + activeElement.clientHeight;
            if (listTop > elementTop) {
                activeElement.scrollIntoView(true);
            }
            if (listBottom < elementBottom) {
                activeElement.scrollIntoView(false);
            }
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ScrollService.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1yZW1vdGUtYXV0b2NvbXBsZXRlLyIsInNvdXJjZXMiOlsiYXBwL3NlcnZpY2VzL3Njcm9sbC1zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsWUFBWSxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFFL0csTUFBTTs7OztJQUNGLFlBQW9CLE9BQW1CO1FBQW5CLFlBQU8sR0FBUCxPQUFPLENBQVk7SUFDdkMsQ0FBQzs7Ozs7SUFFRCw2QkFBNkIsQ0FBQyxXQUFtQjs7Y0FDdkMsbUJBQW1CLEdBQUcsbUJBQWEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUE7O2NBQzdELFdBQVcsR0FBRyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsSUFBSSxvQkFBb0IsRUFBRSxDQUFDO1FBRWpGLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDZCxFQUFFLENBQUMsQ0FBQyxXQUFXLEtBQUssb0JBQW9CLENBQUMsQ0FBQyxDQUFDO2dCQUN2QyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDM0IsTUFBTSxDQUFDO1lBQ1gsQ0FBQzs7a0JBRUssY0FBYyxHQUFHLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLFlBQVksRUFBRSxDQUFDOztrQkFDakUsYUFBYSxHQUFHLGNBQWMsQ0FBQyxXQUFXLENBQUM7O2tCQUUzQyxPQUFPLEdBQUcsV0FBVyxDQUFDLHFCQUFxQixFQUFFLENBQUMsR0FBRzs7a0JBQ2pELFVBQVUsR0FBRyxPQUFPLEdBQUcsV0FBVyxDQUFDLFlBQVk7O2tCQUUvQyxVQUFVLEdBQUcsYUFBYSxDQUFDLHFCQUFxQixFQUFFLENBQUMsR0FBRzs7a0JBQ3RELGFBQWEsR0FBRyxVQUFVLEdBQUcsYUFBYSxDQUFDLFlBQVk7WUFFN0QsRUFBRSxDQUFDLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZCLGFBQWEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkMsQ0FBQztZQUVELEVBQUUsQ0FBQyxDQUFDLFVBQVUsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixhQUFhLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3hDLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQztDQUNKOzs7Ozs7SUEvQmUsZ0NBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFNFQVJDSF9XUkFQUEVSX0NMQVNTLCBPUFRJT05fQ0xBU1MsIERFRkFVTFRfQUNUSVZFX0lOREVYIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9hdXRvY29tcGxldGUuY29uc3RhbnRzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU2Nyb2xsU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVLZXlib2FyT3B0aW9uTmF2aWdhdGlvbihhY3RpdmVJbmRleDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgYXV0b2NvbXBsZXRlRWxlbWVudCA9IDxIVE1MRWxlbWVudD50aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcclxuICAgICAgICBjb25zdCBsaXN0RWxlbWVudCA9IGF1dG9jb21wbGV0ZUVsZW1lbnQucXVlcnlTZWxlY3RvcihgLiR7U0VBUkNIX1dSQVBQRVJfQ0xBU1N9YCk7XHJcblxyXG4gICAgICAgIGlmIChsaXN0RWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAoYWN0aXZlSW5kZXggPT09IERFRkFVTFRfQUNUSVZFX0lOREVYKSB7XHJcbiAgICAgICAgICAgICAgICBsaXN0RWxlbWVudC5zY3JvbGxUbygwLCAwKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgb3B0aW9uRWxlbWVudHMgPSBsaXN0RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKGAuJHtPUFRJT05fQ0xBU1N9YCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSBvcHRpb25FbGVtZW50c1thY3RpdmVJbmRleF07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBsaXN0VG9wID0gbGlzdEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xyXG4gICAgICAgICAgICBjb25zdCBsaXN0Qm90dG9tID0gbGlzdFRvcCArIGxpc3RFbGVtZW50LmNsaWVudEhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRUb3AgPSBhY3RpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudEJvdHRvbSA9IGVsZW1lbnRUb3AgKyBhY3RpdmVFbGVtZW50LmNsaWVudEhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIGlmIChsaXN0VG9wID4gZWxlbWVudFRvcCkge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlRWxlbWVudC5zY3JvbGxJbnRvVmlldyh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGxpc3RCb3R0b20gPCBlbGVtZW50Qm90dG9tKSB7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVFbGVtZW50LnNjcm9sbEludG9WaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==