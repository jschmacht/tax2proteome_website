import { Directive, TemplateRef, Injectable, Component, Input, Output, EventEmitter, ContentChild, forwardRef, ViewChild, ElementRef, HostListener, NgModule } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_ACTIVE_INDEX = -1;
/** @type {?} */
const DEFAULT_MIN_SEARCH_LENGTH = 1;
/** @type {?} */
const DEFAULT_MAX_CHARS = 2147483647;
/** @type {?} */
const DEFAULT_PAUSE = 100;
/** @type {?} */
const NOT_FOUND_TEXT = "No results found";
/** @type {?} */
const SEARCHING_TEXT = "Searching...";
/** @type {?} */
const SEARCH_WRAPPER_CLASS = "autocomplete-search-wrapper";
/** @type {?} */
const OPTION_VALUE_CLASS = "autocomplete-option-value";
/** @type {?} */
const OPTION_DESCRIPTION_CLASS = "autocomplete-option-description";
/** @type {?} */
const OPTION_CLASS = "autocomplete-option";
/** @type {?} */
const OPTION_LIST_WRAPPER_CLASS = "option-list-wrapper";
/** @type {?} */
const LOADING_CLASS = "autocomplete-loading";
/** @type {?} */
const RESULTS_NOT_FOUND_CLASS = "autocomplete-not-found";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const SearchStateType = {
    Untracked: 0,
    Loading: 1,
    Finished: 2,
};
SearchStateType[SearchStateType.Untracked] = 'Untracked';
SearchStateType[SearchStateType.Loading] = 'Loading';
SearchStateType[SearchStateType.Finished] = 'Finished';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OptionTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
OptionTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[remote-autocomplete-option-tmpl]'
            },] },
];
OptionTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AutocompleteService {
    constructor() {
        this.changedHighlightItemSubject = new Subject();
        this.selectItemSubject = new Subject();
        this._isOpen = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set isOpen(value) {
        this._isOpen = value;
    }
    /**
     * @return {?}
     */
    get isOpen() {
        return this._isOpen;
    }
}
AutocompleteService.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ItemListService {
    /**
     * @param {?} autocompleteService
     */
    constructor(autocompleteService) {
        this.autocompleteService = autocompleteService;
        this._activeIndex = DEFAULT_ACTIVE_INDEX;
        this.items = [];
    }
    /**
     * @param {?} index
     * @return {?}
     */
    set activeIndex(index) {
        if (this.autocompleteService.isOpen) {
            if (index >= this.items.length) {
                this.restoreIntialActiveIndex();
                return;
            }
            if (index < DEFAULT_ACTIVE_INDEX) {
                this._activeIndex = this.items.length - 1;
                this.autocompleteService.changedHighlightItemSubject.next(this._activeIndex);
                return;
            }
            this._activeIndex = index;
            this.autocompleteService.changedHighlightItemSubject.next(this._activeIndex);
        }
    }
    /**
     * @return {?}
     */
    get activeIndex() {
        return this._activeIndex;
    }
    /**
     * @return {?}
     */
    restoreIntialActiveIndex() {
        this._activeIndex = DEFAULT_ACTIVE_INDEX;
        this.autocompleteService.changedHighlightItemSubject.next(this._activeIndex);
    }
}
ItemListService.decorators = [
    { type: Injectable },
];
ItemListService.ctorParameters = () => [
    { type: AutocompleteService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RemoteAutocompleteComponent {
    /**
     * @param {?} itemListService
     * @param {?} autocompleteService
     */
    constructor(itemListService, autocompleteService) {
        this.itemListService = itemListService;
        this.autocompleteService = autocompleteService;
        this.stopEnterPropagationOnSelect = false;
        this.needToShowNotFoundText = true;
        this.needToShowSearchingText = true;
        this.type = new EventEmitter();
        this.highlighted = new EventEmitter();
        this.selected = new EventEmitter();
        this.blur = new EventEmitter();
        this.focusEvent = new EventEmitter();
        this.searchStates = SearchStateType;
        this.searchState = SearchStateType.Untracked;
        this.SEARCH_WRAPPER_CLASS = SEARCH_WRAPPER_CLASS;
        this.OPTION_LIST_WRAPPER_CLASS = OPTION_LIST_WRAPPER_CLASS;
        this.OPTION_CLASS = OPTION_CLASS;
        this.OPTION_VALUE_CLASS = OPTION_VALUE_CLASS;
        this.OPTION_DESCRIPTION_CLASS = OPTION_DESCRIPTION_CLASS;
        this.LOADING_CLASS = LOADING_CLASS;
        this.RESULTS_NOT_FOUND_CLASS = RESULTS_NOT_FOUND_CLASS;
        this.propagateChange = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => { });
        this.propagateTouched = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => { });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.validateService();
        this.disabled = this.getDefaultIfNullOrUndefined(this.disabled, false);
        this.minChars = this.getDefaultIfNullOrUndefined(this.minChars, DEFAULT_MIN_SEARCH_LENGTH);
        this.maxChars = this.maxChars || DEFAULT_MAX_CHARS;
        this.pause = this.pause || DEFAULT_PAUSE;
        this.notFoundText = this.notFoundText || NOT_FOUND_TEXT;
        this.searchingText = this.searchingText || SEARCHING_TEXT;
        this.changedHighlightSubscription = this.autocompleteService.changedHighlightItemSubject.subscribe((/**
         * @param {?} index
         * @return {?}
         */
        (index) => {
            this.onActiveIndexChanged(index);
        }));
        this.selectSubscription = this.autocompleteService.selectItemSubject.subscribe((/**
         * @param {?} index
         * @return {?}
         */
        (index) => {
            /** @type {?} */
            const result = this.searchResult[index];
            this.propagateChange(result.value);
            this.selected.emit(result);
            this.close();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.changedHighlightSubscription.unsubscribe();
        this.selectSubscription.unsubscribe();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== undefined) {
            this.searchValue = value;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.propagateTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @return {?}
     */
    onType() {
        this.propagateChange(this.searchValue);
        this.originalSearchValue = this.searchValue;
        this.type.emit();
        if (this.validsearchTerm()) {
            this.searchState = this.searchStates.Loading;
        }
        else {
            this.close();
        }
        this.resetSearchTimeout();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onInputBlur(event) {
        if (event.relatedTarget) {
            /** @type {?} */
            let related = (/** @type {?} */ (event.relatedTarget));
            if (related.classList.contains(this.OPTION_CLASS)) {
                return;
            }
        }
        this.propagateTouched(this.searchValue);
        this.close();
        this.blur.emit(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onInputFocus(event) {
        this.focusEvent.emit(event);
    }
    /**
     * @return {?}
     */
    get inputClass() {
        /** @type {?} */
        let classes = '';
        if (this.inputClasses) {
            classes = this.inputClasses.join(' ');
        }
        return classes;
    }
    /**
     * @return {?}
     */
    focus() {
        ((/** @type {?} */ (this.inputField.nativeElement))).focus();
    }
    /**
     * @return {?}
     */
    open() {
        this.onType();
    }
    /**
     * @return {?}
     */
    close() {
        this.autocompleteService.isOpen = false;
        this.searchState = this.searchStates.Untracked;
    }
    /**
     * @private
     * @return {?}
     */
    validateService() {
        if (!this.service) {
            throw new Error("AutocompleteService must be implemented");
        }
        if (this.isParameterizedSearch(this.service) && (this.searchParameters === undefined || this.searchParameters === null)) {
            throw new Error("Please provide additionalSearchParams or just provide AutocompleteSourceService instaead of ParameterizedAutocompleteSourceService");
        }
    }
    /**
     * @private
     * @param {?} activeIndex
     * @return {?}
     */
    onActiveIndexChanged(activeIndex) {
        /** @type {?} */
        let highlightedItem;
        if (activeIndex === DEFAULT_ACTIVE_INDEX) {
            highlightedItem = null;
            this.searchValue = this.originalSearchValue;
        }
        else {
            highlightedItem = this.searchResult[activeIndex];
            this.searchValue = highlightedItem.value;
        }
        this.propagateChange(this.searchValue);
        this.highlighted.emit(highlightedItem);
    }
    /**
     * @private
     * @return {?}
     */
    resetSearchTimeout() {
        this.clearSearchTimeout();
        this.setSearchTimeout();
    }
    /**
     * @private
     * @return {?}
     */
    setSearchTimeout() {
        this.typingTimeout = setTimeout(this.search.bind(this), this.pause);
    }
    /**
     * @private
     * @return {?}
     */
    clearSearchTimeout() {
        clearTimeout(this.typingTimeout);
    }
    /**
     * @private
     * @return {?}
     */
    search() {
        this.itemListService.restoreIntialActiveIndex();
        if (this.validsearchTerm()) {
            this.performSearch().first().subscribe((/**
             * @param {?} results
             * @return {?}
             */
            (results) => {
                if (this.searchState !== this.searchStates.Untracked) {
                    this.autocompleteService.isOpen = results.length > 0;
                    this.itemListService.items = results;
                    this.searchResult = results;
                    this.searchState = this.searchStates.Finished;
                }
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    performSearch() {
        if (this.isParameterizedSearch(this.service)) {
            return ((/** @type {?} */ (this.service))).getWithParams(this.searchValue, this.searchParameters);
        }
        else {
            return ((/** @type {?} */ (this.service))).get(this.searchValue);
        }
    }
    /**
     * @private
     * @return {?}
     */
    validsearchTerm() {
        return (this.searchValue || '').length >= this.minChars;
    }
    /**
     * @private
     * @param {?} service
     * @return {?}
     */
    isParameterizedSearch(service) {
        return ((/** @type {?} */ (service))).getWithParams !== undefined;
    }
    /**
     * @private
     * @template T
     * @param {?} value
     * @param {?} defaultValue
     * @return {?}
     */
    getDefaultIfNullOrUndefined(value, defaultValue) {
        return value === undefined || value === null
            ? defaultValue
            : value;
    }
}
RemoteAutocompleteComponent.decorators = [
    { type: Component, args: [{
                selector: 'remote-autocomplete',
                template: `<div keyboard-navigation [stopEnterPropagation]="stopEnterPropagationOnSelect" class="remote-autocomplete">
    <input [(ngModel)]="searchValue"
           [attr.id]="inputId"
           [attr.name]="inputName"
           [attr.class]="inputClass"
           [disabled]="disabled"
           [attr.placeholder]="placeholder"
           [attr.autocomplete]="autocompleteAttr"
           [attr.tabindex]="tabindex"
           maxlength="{{maxChars}}"
           (input)="onType()"
           (blur)="onInputBlur($event)"
           (focus)="onInputFocus($event)"
           #input />
    <div *ngIf="searchState === searchStates.Loading && needToShowSearchingText || 
                searchState === searchStates.Finished && (searchResult?.length > 0 || needToShowNotFoundText)" [class]="SEARCH_WRAPPER_CLASS">
        <div *ngIf="searchState === searchStates.Loading">
            <span [class]="LOADING_CLASS">{{searchingText}}</span>
        </div>

        <div *ngIf="searchState === searchStates.Finished && searchResult.length === 0">
            <span [class]="RESULTS_NOT_FOUND_CLASS">{{notFoundText}}</span>
        </div>

        <div *ngIf="searchState === searchStates.Finished && searchResult?.length > 0" [class]="OPTION_LIST_WRAPPER_CLASS">
            <div *ngFor="let item of searchResult; index as i"
                 remote-autocomplete-option
                 [itemIndex]="i"
                 [class]="OPTION_CLASS"
                 [ngClass]="{'autocomplete-option-active': i === itemListService.activeIndex}"
                 tabindex="-1">
                <ng-template #defaultOptionTemplate>
                    <span [class]="OPTION_VALUE_CLASS">{{item.value}}</span>
                    <span *ngIf="item.description" [class]="OPTION_DESCRIPTION_CLASS">{{item.description}}</span>
                </ng-template>

                <ng-template [ngTemplateOutlet]="optionTemplate || defaultOptionTemplate" [ngTemplateOutletContext]="{ $implicit: item }">
                </ng-template>
            </div>
        </div>
    </div>
</div>`,
                styles: [`.autocomplete-search-wrapper{border:1px solid #ccc;max-height:200px;overflow:auto;max-width:200px}.autocomplete-option-active{background-color:#d3d3d3}`],
                providers: [
                    AutocompleteService,
                    ItemListService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => RemoteAutocompleteComponent)),
                        multi: true
                    }
                ]
            },] },
];
RemoteAutocompleteComponent.ctorParameters = () => [
    { type: ItemListService },
    { type: AutocompleteService }
];
RemoteAutocompleteComponent.propDecorators = {
    service: [{ type: Input, args: ['service',] }],
    minChars: [{ type: Input, args: ['minSearchLength',] }],
    maxChars: [{ type: Input, args: ['maxChars',] }],
    pause: [{ type: Input, args: ['pause',] }],
    inputId: [{ type: Input, args: ['inputId',] }],
    inputName: [{ type: Input, args: ['inputName',] }],
    inputClasses: [{ type: Input, args: ['inputClass',] }],
    disabled: [{ type: Input, args: ['disabled',] }],
    notFoundText: [{ type: Input, args: ['notFoundText',] }],
    searchingText: [{ type: Input, args: ['searchingText',] }],
    placeholder: [{ type: Input, args: ['placeholder',] }],
    searchParameters: [{ type: Input, args: ['searchParameters',] }],
    autocompleteAttr: [{ type: Input, args: ['autocompleteAttr',] }],
    tabindex: [{ type: Input, args: ['tabindex',] }],
    stopEnterPropagationOnSelect: [{ type: Input, args: ['stopEnterPropagationOnSelect',] }],
    needToShowNotFoundText: [{ type: Input, args: ['needToShowNotFoundText',] }],
    needToShowSearchingText: [{ type: Input, args: ['needToShowSearchingText',] }],
    type: [{ type: Output, args: ['type',] }],
    highlighted: [{ type: Output, args: ['highlighted',] }],
    selected: [{ type: Output, args: ['selected',] }],
    blur: [{ type: Output, args: ['blur',] }],
    focusEvent: [{ type: Output, args: ['focus',] }],
    optionTemplate: [{ type: ContentChild, args: [OptionTemplateDirective, { read: TemplateRef },] }],
    inputField: [{ type: ViewChild, args: ['input',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OptionDirective {
    /**
     * @param {?} autocompleteService
     * @param {?} itemListService
     */
    constructor(autocompleteService, itemListService) {
        this.autocompleteService = autocompleteService;
        this.itemListService = itemListService;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.itemListService.activeIndex = this.index;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        this.itemListService.restoreIntialActiveIndex();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        this.autocompleteService.selectItemSubject.next(this.index);
    }
}
OptionDirective.decorators = [
    { type: Directive, args: [{
                selector: '[remote-autocomplete-option]',
                host: {
                    '(mouseenter)': 'onMouseEnter($event)',
                    '(mouseleave)': 'onMouseLeave($event)',
                    '(click)': 'onClick($event)'
                }
            },] },
];
OptionDirective.ctorParameters = () => [
    { type: AutocompleteService },
    { type: ItemListService }
];
OptionDirective.propDecorators = {
    index: [{ type: Input, args: ['itemIndex',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const KeyCode = {
    Backspace: 8,
    Tab: 9,
    Enter: 13,
    Shift: 16,
    Ctrl: 17,
    Alt: 18,
    PauseBreak: 19,
    CapsLock: 20,
    Escape: 27,
    Space: 32,
    PageUp: 33,
    PageDown: 34,
    End: 35,
    Home: 36,
    LeftArrow: 37,
    UpArrow: 38,
    RightArrow: 39,
    DownArrow: 40,
    Insert: 45,
    Delete: 46,
    Zero: 48,
    ClosedParen: 48,
    One: 49,
    ExclamationMark: 49,
    Two: 50,
    AtSign: 50,
    Three: 51,
    PoundSign: 51,
    Hash: 51,
    Four: 52,
    DollarSign: 52,
    Five: 53,
    PercentSign: 53,
    Six: 54,
    Caret: 54,
    Hat: 54,
    Seven: 55,
    Ampersand: 55,
    Eight: 56,
    Star: 56,
    Asterik: 56,
    Nine: 57,
    OpenParen: 57,
    A: 65,
    B: 66,
    C: 67,
    D: 68,
    E: 69,
    F: 70,
    G: 71,
    H: 72,
    I: 73,
    J: 74,
    K: 75,
    L: 76,
    M: 77,
    N: 78,
    O: 79,
    P: 80,
    Q: 81,
    R: 82,
    S: 83,
    T: 84,
    U: 85,
    V: 86,
    W: 87,
    X: 88,
    Y: 89,
    Z: 90,
    LeftWindowKey: 91,
    RightWindowKey: 92,
    SelectKey: 93,
    Numpad0: 96,
    Numpad1: 97,
    Numpad2: 98,
    Numpad3: 99,
    Numpad4: 100,
    Numpad5: 101,
    Numpad6: 102,
    Numpad7: 103,
    Numpad8: 104,
    Numpad9: 105,
    Multiply: 106,
    Add: 107,
    Subtract: 109,
    DecimalPoint: 110,
    Divide: 111,
    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123,
    NumLock: 144,
    ScrollLock: 145,
    SemiColon: 186,
    Equals: 187,
    Comma: 188,
    Dash: 189,
    Period: 190,
    UnderScore: 189,
    PlusSign: 187,
    ForwardSlash: 191,
    Tilde: 192,
    GraveAccent: 192,
    OpenBracket: 219,
    ClosedBracket: 221,
    Quote: 222,
};
KeyCode[KeyCode.Backspace] = 'Backspace';
KeyCode[KeyCode.Tab] = 'Tab';
KeyCode[KeyCode.Enter] = 'Enter';
KeyCode[KeyCode.Shift] = 'Shift';
KeyCode[KeyCode.Ctrl] = 'Ctrl';
KeyCode[KeyCode.Alt] = 'Alt';
KeyCode[KeyCode.PauseBreak] = 'PauseBreak';
KeyCode[KeyCode.CapsLock] = 'CapsLock';
KeyCode[KeyCode.Escape] = 'Escape';
KeyCode[KeyCode.Space] = 'Space';
KeyCode[KeyCode.PageUp] = 'PageUp';
KeyCode[KeyCode.PageDown] = 'PageDown';
KeyCode[KeyCode.End] = 'End';
KeyCode[KeyCode.Home] = 'Home';
KeyCode[KeyCode.LeftArrow] = 'LeftArrow';
KeyCode[KeyCode.UpArrow] = 'UpArrow';
KeyCode[KeyCode.RightArrow] = 'RightArrow';
KeyCode[KeyCode.DownArrow] = 'DownArrow';
KeyCode[KeyCode.Insert] = 'Insert';
KeyCode[KeyCode.Delete] = 'Delete';
KeyCode[KeyCode.Zero] = 'Zero';
KeyCode[KeyCode.ClosedParen] = 'ClosedParen';
KeyCode[KeyCode.One] = 'One';
KeyCode[KeyCode.ExclamationMark] = 'ExclamationMark';
KeyCode[KeyCode.Two] = 'Two';
KeyCode[KeyCode.AtSign] = 'AtSign';
KeyCode[KeyCode.Three] = 'Three';
KeyCode[KeyCode.PoundSign] = 'PoundSign';
KeyCode[KeyCode.Hash] = 'Hash';
KeyCode[KeyCode.Four] = 'Four';
KeyCode[KeyCode.DollarSign] = 'DollarSign';
KeyCode[KeyCode.Five] = 'Five';
KeyCode[KeyCode.PercentSign] = 'PercentSign';
KeyCode[KeyCode.Six] = 'Six';
KeyCode[KeyCode.Caret] = 'Caret';
KeyCode[KeyCode.Hat] = 'Hat';
KeyCode[KeyCode.Seven] = 'Seven';
KeyCode[KeyCode.Ampersand] = 'Ampersand';
KeyCode[KeyCode.Eight] = 'Eight';
KeyCode[KeyCode.Star] = 'Star';
KeyCode[KeyCode.Asterik] = 'Asterik';
KeyCode[KeyCode.Nine] = 'Nine';
KeyCode[KeyCode.OpenParen] = 'OpenParen';
KeyCode[KeyCode.A] = 'A';
KeyCode[KeyCode.B] = 'B';
KeyCode[KeyCode.C] = 'C';
KeyCode[KeyCode.D] = 'D';
KeyCode[KeyCode.E] = 'E';
KeyCode[KeyCode.F] = 'F';
KeyCode[KeyCode.G] = 'G';
KeyCode[KeyCode.H] = 'H';
KeyCode[KeyCode.I] = 'I';
KeyCode[KeyCode.J] = 'J';
KeyCode[KeyCode.K] = 'K';
KeyCode[KeyCode.L] = 'L';
KeyCode[KeyCode.M] = 'M';
KeyCode[KeyCode.N] = 'N';
KeyCode[KeyCode.O] = 'O';
KeyCode[KeyCode.P] = 'P';
KeyCode[KeyCode.Q] = 'Q';
KeyCode[KeyCode.R] = 'R';
KeyCode[KeyCode.S] = 'S';
KeyCode[KeyCode.T] = 'T';
KeyCode[KeyCode.U] = 'U';
KeyCode[KeyCode.V] = 'V';
KeyCode[KeyCode.W] = 'W';
KeyCode[KeyCode.X] = 'X';
KeyCode[KeyCode.Y] = 'Y';
KeyCode[KeyCode.Z] = 'Z';
KeyCode[KeyCode.LeftWindowKey] = 'LeftWindowKey';
KeyCode[KeyCode.RightWindowKey] = 'RightWindowKey';
KeyCode[KeyCode.SelectKey] = 'SelectKey';
KeyCode[KeyCode.Numpad0] = 'Numpad0';
KeyCode[KeyCode.Numpad1] = 'Numpad1';
KeyCode[KeyCode.Numpad2] = 'Numpad2';
KeyCode[KeyCode.Numpad3] = 'Numpad3';
KeyCode[KeyCode.Numpad4] = 'Numpad4';
KeyCode[KeyCode.Numpad5] = 'Numpad5';
KeyCode[KeyCode.Numpad6] = 'Numpad6';
KeyCode[KeyCode.Numpad7] = 'Numpad7';
KeyCode[KeyCode.Numpad8] = 'Numpad8';
KeyCode[KeyCode.Numpad9] = 'Numpad9';
KeyCode[KeyCode.Multiply] = 'Multiply';
KeyCode[KeyCode.Add] = 'Add';
KeyCode[KeyCode.Subtract] = 'Subtract';
KeyCode[KeyCode.DecimalPoint] = 'DecimalPoint';
KeyCode[KeyCode.Divide] = 'Divide';
KeyCode[KeyCode.F1] = 'F1';
KeyCode[KeyCode.F2] = 'F2';
KeyCode[KeyCode.F3] = 'F3';
KeyCode[KeyCode.F4] = 'F4';
KeyCode[KeyCode.F5] = 'F5';
KeyCode[KeyCode.F6] = 'F6';
KeyCode[KeyCode.F7] = 'F7';
KeyCode[KeyCode.F8] = 'F8';
KeyCode[KeyCode.F9] = 'F9';
KeyCode[KeyCode.F10] = 'F10';
KeyCode[KeyCode.F11] = 'F11';
KeyCode[KeyCode.F12] = 'F12';
KeyCode[KeyCode.NumLock] = 'NumLock';
KeyCode[KeyCode.ScrollLock] = 'ScrollLock';
KeyCode[KeyCode.SemiColon] = 'SemiColon';
KeyCode[KeyCode.Equals] = 'Equals';
KeyCode[KeyCode.Comma] = 'Comma';
KeyCode[KeyCode.Dash] = 'Dash';
KeyCode[KeyCode.Period] = 'Period';
KeyCode[KeyCode.UnderScore] = 'UnderScore';
KeyCode[KeyCode.PlusSign] = 'PlusSign';
KeyCode[KeyCode.ForwardSlash] = 'ForwardSlash';
KeyCode[KeyCode.Tilde] = 'Tilde';
KeyCode[KeyCode.GraveAccent] = 'GraveAccent';
KeyCode[KeyCode.OpenBracket] = 'OpenBracket';
KeyCode[KeyCode.ClosedBracket] = 'ClosedBracket';
KeyCode[KeyCode.Quote] = 'Quote';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ScrollService {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
    }
    /**
     * @param {?} activeIndex
     * @return {?}
     */
    handleKeyboarOptionNavigation(activeIndex) {
        /** @type {?} */
        const autocompleteElement = (/** @type {?} */ (this.element.nativeElement));
        /** @type {?} */
        const listElement = autocompleteElement.querySelector(`.${SEARCH_WRAPPER_CLASS}`);
        if (listElement) {
            if (activeIndex === DEFAULT_ACTIVE_INDEX) {
                listElement.scrollTo(0, 0);
                return;
            }
            /** @type {?} */
            const optionElements = listElement.querySelectorAll(`.${OPTION_CLASS}`);
            /** @type {?} */
            const activeElement = optionElements[activeIndex];
            /** @type {?} */
            const listTop = listElement.getBoundingClientRect().top;
            /** @type {?} */
            const listBottom = listTop + listElement.clientHeight;
            /** @type {?} */
            const elementTop = activeElement.getBoundingClientRect().top;
            /** @type {?} */
            const elementBottom = elementTop + activeElement.clientHeight;
            if (listTop > elementTop) {
                activeElement.scrollIntoView(true);
            }
            if (listBottom < elementBottom) {
                activeElement.scrollIntoView(false);
            }
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class KeyboardNavigationDirective {
    /**
     * @param {?} autocompleteService
     * @param {?} itemListService
     * @param {?} element
     */
    constructor(autocompleteService, itemListService, element) {
        this.autocompleteService = autocompleteService;
        this.itemListService = itemListService;
        this.element = element;
        this.stopEnterPropagation = false;
        this.scrollService = new ScrollService(element);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeydown(event) {
        /** @type {?} */
        let key = event.which || event.keyCode;
        switch (key) {
            case KeyCode.DownArrow:
                this.handleDownKey(event);
                break;
            case KeyCode.UpArrow:
                this.handleUpKey(event);
                break;
            case KeyCode.Enter:
                this.handleEnter(event);
                break;
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    handleDownKey(event) {
        this.itemListService.activeIndex++;
        this.scrollService.handleKeyboarOptionNavigation(this.itemListService.activeIndex);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    handleUpKey(event) {
        this.itemListService.activeIndex--;
        this.scrollService.handleKeyboarOptionNavigation(this.itemListService.activeIndex);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    handleEnter(event) {
        if (this.itemListService.activeIndex >= 0) {
            this.autocompleteService.selectItemSubject.next(this.itemListService.activeIndex);
            event.preventDefault();
            if (this.stopEnterPropagation) {
                event.stopPropagation();
            }
        }
    }
}
KeyboardNavigationDirective.decorators = [
    { type: Directive, args: [{
                selector: '[keyboard-navigation]'
            },] },
];
KeyboardNavigationDirective.ctorParameters = () => [
    { type: AutocompleteService },
    { type: ItemListService },
    { type: ElementRef }
];
KeyboardNavigationDirective.propDecorators = {
    stopEnterPropagation: [{ type: Input }],
    onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RemoteAutocompleteModule {
}
RemoteAutocompleteModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule
                ],
                declarations: [
                    RemoteAutocompleteComponent,
                    OptionTemplateDirective,
                    OptionDirective,
                    KeyboardNavigationDirective
                ],
                exports: [
                    RemoteAutocompleteComponent,
                    OptionTemplateDirective
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { RemoteAutocompleteModule, RemoteAutocompleteComponent, OptionTemplateDirective, KeyboardNavigationDirective as ɵd, OptionDirective as ɵc, AutocompleteService as ɵa, ItemListService as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,