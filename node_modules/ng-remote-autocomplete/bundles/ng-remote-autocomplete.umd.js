(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/Subject'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-remote-autocomplete', ['exports', '@angular/core', 'rxjs/Subject', '@angular/forms', '@angular/common'], factory) :
    (factory((global['ng-remote-autocomplete'] = {}),global.ng.core,global.rxjs.Subject,global.ng.forms,global.ng.common));
}(this, (function (exports,core,Subject,forms,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_ACTIVE_INDEX = -1;
    /** @type {?} */
    var DEFAULT_MIN_SEARCH_LENGTH = 1;
    /** @type {?} */
    var DEFAULT_MAX_CHARS = 2147483647;
    /** @type {?} */
    var DEFAULT_PAUSE = 100;
    /** @type {?} */
    var NOT_FOUND_TEXT = "No results found";
    /** @type {?} */
    var SEARCHING_TEXT = "Searching...";
    /** @type {?} */
    var SEARCH_WRAPPER_CLASS = "autocomplete-search-wrapper";
    /** @type {?} */
    var OPTION_VALUE_CLASS = "autocomplete-option-value";
    /** @type {?} */
    var OPTION_DESCRIPTION_CLASS = "autocomplete-option-description";
    /** @type {?} */
    var OPTION_CLASS = "autocomplete-option";
    /** @type {?} */
    var OPTION_LIST_WRAPPER_CLASS = "option-list-wrapper";
    /** @type {?} */
    var LOADING_CLASS = "autocomplete-loading";
    /** @type {?} */
    var RESULTS_NOT_FOUND_CLASS = "autocomplete-not-found";

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var SearchStateType = {
        Untracked: 0,
        Loading: 1,
        Finished: 2,
    };
    SearchStateType[SearchStateType.Untracked] = 'Untracked';
    SearchStateType[SearchStateType.Loading] = 'Loading';
    SearchStateType[SearchStateType.Finished] = 'Finished';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OptionTemplateDirective = (function () {
        function OptionTemplateDirective(template) {
            this.template = template;
        }
        OptionTemplateDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[remote-autocomplete-option-tmpl]'
                    },] },
        ];
        OptionTemplateDirective.ctorParameters = function () {
            return [
                { type: core.TemplateRef }
            ];
        };
        return OptionTemplateDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AutocompleteService = (function () {
        function AutocompleteService() {
            this.changedHighlightItemSubject = new Subject.Subject();
            this.selectItemSubject = new Subject.Subject();
            this._isOpen = false;
        }
        Object.defineProperty(AutocompleteService.prototype, "isOpen", {
            get: /**
             * @return {?}
             */ function () {
                return this._isOpen;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._isOpen = value;
            },
            enumerable: true,
            configurable: true
        });
        AutocompleteService.decorators = [
            { type: core.Injectable },
        ];
        return AutocompleteService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ItemListService = (function () {
        function ItemListService(autocompleteService) {
            this.autocompleteService = autocompleteService;
            this._activeIndex = DEFAULT_ACTIVE_INDEX;
            this.items = [];
        }
        Object.defineProperty(ItemListService.prototype, "activeIndex", {
            get: /**
             * @return {?}
             */ function () {
                return this._activeIndex;
            },
            set: /**
             * @param {?} index
             * @return {?}
             */ function (index) {
                if (this.autocompleteService.isOpen) {
                    if (index >= this.items.length) {
                        this.restoreIntialActiveIndex();
                        return;
                    }
                    if (index < DEFAULT_ACTIVE_INDEX) {
                        this._activeIndex = this.items.length - 1;
                        this.autocompleteService.changedHighlightItemSubject.next(this._activeIndex);
                        return;
                    }
                    this._activeIndex = index;
                    this.autocompleteService.changedHighlightItemSubject.next(this._activeIndex);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ItemListService.prototype.restoreIntialActiveIndex = /**
         * @return {?}
         */
            function () {
                this._activeIndex = DEFAULT_ACTIVE_INDEX;
                this.autocompleteService.changedHighlightItemSubject.next(this._activeIndex);
            };
        ItemListService.decorators = [
            { type: core.Injectable },
        ];
        ItemListService.ctorParameters = function () {
            return [
                { type: AutocompleteService }
            ];
        };
        return ItemListService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RemoteAutocompleteComponent = (function () {
        function RemoteAutocompleteComponent(itemListService, autocompleteService) {
            this.itemListService = itemListService;
            this.autocompleteService = autocompleteService;
            this.stopEnterPropagationOnSelect = false;
            this.needToShowNotFoundText = true;
            this.needToShowSearchingText = true;
            this.type = new core.EventEmitter();
            this.highlighted = new core.EventEmitter();
            this.selected = new core.EventEmitter();
            this.blur = new core.EventEmitter();
            this.focusEvent = new core.EventEmitter();
            this.searchStates = SearchStateType;
            this.searchState = SearchStateType.Untracked;
            this.SEARCH_WRAPPER_CLASS = SEARCH_WRAPPER_CLASS;
            this.OPTION_LIST_WRAPPER_CLASS = OPTION_LIST_WRAPPER_CLASS;
            this.OPTION_CLASS = OPTION_CLASS;
            this.OPTION_VALUE_CLASS = OPTION_VALUE_CLASS;
            this.OPTION_DESCRIPTION_CLASS = OPTION_DESCRIPTION_CLASS;
            this.LOADING_CLASS = LOADING_CLASS;
            this.RESULTS_NOT_FOUND_CLASS = RESULTS_NOT_FOUND_CLASS;
            this.propagateChange = (function (_) { });
            this.propagateTouched = (function (_) { });
        }
        /**
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.validateService();
                this.disabled = this.getDefaultIfNullOrUndefined(this.disabled, false);
                this.minChars = this.getDefaultIfNullOrUndefined(this.minChars, DEFAULT_MIN_SEARCH_LENGTH);
                this.maxChars = this.maxChars || DEFAULT_MAX_CHARS;
                this.pause = this.pause || DEFAULT_PAUSE;
                this.notFoundText = this.notFoundText || NOT_FOUND_TEXT;
                this.searchingText = this.searchingText || SEARCHING_TEXT;
                this.changedHighlightSubscription = this.autocompleteService.changedHighlightItemSubject.subscribe((function (index) {
                    _this.onActiveIndexChanged(index);
                }));
                this.selectSubscription = this.autocompleteService.selectItemSubject.subscribe((function (index) {
                    /** @type {?} */
                    var result = _this.searchResult[index];
                    _this.propagateChange(result.value);
                    _this.selected.emit(result);
                    _this.close();
                }));
            };
        /**
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.changedHighlightSubscription.unsubscribe();
                this.selectSubscription.unsubscribe();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value !== undefined) {
                    this.searchValue = value;
                }
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.propagateChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.propagateTouched = fn;
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.disabled = isDisabled;
            };
        /**
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.onType = /**
         * @return {?}
         */
            function () {
                this.propagateChange(this.searchValue);
                this.originalSearchValue = this.searchValue;
                this.type.emit();
                if (this.validsearchTerm()) {
                    this.searchState = this.searchStates.Loading;
                }
                else {
                    this.close();
                }
                this.resetSearchTimeout();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.onInputBlur = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (event.relatedTarget) {
                    /** @type {?} */
                    var related = ((event.relatedTarget));
                    if (related.classList.contains(this.OPTION_CLASS)) {
                        return;
                    }
                }
                this.propagateTouched(this.searchValue);
                this.close();
                this.blur.emit(event);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.onInputFocus = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.focusEvent.emit(event);
            };
        Object.defineProperty(RemoteAutocompleteComponent.prototype, "inputClass", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var classes = '';
                if (this.inputClasses) {
                    classes = this.inputClasses.join(' ');
                }
                return classes;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.focus = /**
         * @return {?}
         */
            function () {
                (((this.inputField.nativeElement))).focus();
            };
        /**
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.open = /**
         * @return {?}
         */
            function () {
                this.onType();
            };
        /**
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                this.autocompleteService.isOpen = false;
                this.searchState = this.searchStates.Untracked;
            };
        /**
         * @private
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.validateService = /**
         * @private
         * @return {?}
         */
            function () {
                if (!this.service) {
                    throw new Error("AutocompleteService must be implemented");
                }
                if (this.isParameterizedSearch(this.service) && (this.searchParameters === undefined || this.searchParameters === null)) {
                    throw new Error("Please provide additionalSearchParams or just provide AutocompleteSourceService instaead of ParameterizedAutocompleteSourceService");
                }
            };
        /**
         * @private
         * @param {?} activeIndex
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.onActiveIndexChanged = /**
         * @private
         * @param {?} activeIndex
         * @return {?}
         */
            function (activeIndex) {
                /** @type {?} */
                var highlightedItem;
                if (activeIndex === DEFAULT_ACTIVE_INDEX) {
                    highlightedItem = null;
                    this.searchValue = this.originalSearchValue;
                }
                else {
                    highlightedItem = this.searchResult[activeIndex];
                    this.searchValue = highlightedItem.value;
                }
                this.propagateChange(this.searchValue);
                this.highlighted.emit(highlightedItem);
            };
        /**
         * @private
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.resetSearchTimeout = /**
         * @private
         * @return {?}
         */
            function () {
                this.clearSearchTimeout();
                this.setSearchTimeout();
            };
        /**
         * @private
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.setSearchTimeout = /**
         * @private
         * @return {?}
         */
            function () {
                this.typingTimeout = setTimeout(this.search.bind(this), this.pause);
            };
        /**
         * @private
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.clearSearchTimeout = /**
         * @private
         * @return {?}
         */
            function () {
                clearTimeout(this.typingTimeout);
            };
        /**
         * @private
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.search = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.itemListService.restoreIntialActiveIndex();
                if (this.validsearchTerm()) {
                    this.performSearch().first().subscribe((function (results) {
                        if (_this.searchState !== _this.searchStates.Untracked) {
                            _this.autocompleteService.isOpen = results.length > 0;
                            _this.itemListService.items = results;
                            _this.searchResult = results;
                            _this.searchState = _this.searchStates.Finished;
                        }
                    }));
                }
            };
        /**
         * @private
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.performSearch = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.isParameterizedSearch(this.service)) {
                    return (((this.service))).getWithParams(this.searchValue, this.searchParameters);
                }
                else {
                    return (((this.service))).get(this.searchValue);
                }
            };
        /**
         * @private
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.validsearchTerm = /**
         * @private
         * @return {?}
         */
            function () {
                return (this.searchValue || '').length >= this.minChars;
            };
        /**
         * @private
         * @param {?} service
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.isParameterizedSearch = /**
         * @private
         * @param {?} service
         * @return {?}
         */
            function (service) {
                return (((service))).getWithParams !== undefined;
            };
        /**
         * @private
         * @template T
         * @param {?} value
         * @param {?} defaultValue
         * @return {?}
         */
        RemoteAutocompleteComponent.prototype.getDefaultIfNullOrUndefined = /**
         * @private
         * @template T
         * @param {?} value
         * @param {?} defaultValue
         * @return {?}
         */
            function (value, defaultValue) {
                return value === undefined || value === null
                    ? defaultValue
                    : value;
            };
        RemoteAutocompleteComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'remote-autocomplete',
                        template: "<div keyboard-navigation [stopEnterPropagation]=\"stopEnterPropagationOnSelect\" class=\"remote-autocomplete\">\n    <input [(ngModel)]=\"searchValue\"\n           [attr.id]=\"inputId\"\n           [attr.name]=\"inputName\"\n           [attr.class]=\"inputClass\"\n           [disabled]=\"disabled\"\n           [attr.placeholder]=\"placeholder\"\n           [attr.autocomplete]=\"autocompleteAttr\"\n           [attr.tabindex]=\"tabindex\"\n           maxlength=\"{{maxChars}}\"\n           (input)=\"onType()\"\n           (blur)=\"onInputBlur($event)\"\n           (focus)=\"onInputFocus($event)\"\n           #input />\n    <div *ngIf=\"searchState === searchStates.Loading && needToShowSearchingText || \n                searchState === searchStates.Finished && (searchResult?.length > 0 || needToShowNotFoundText)\" [class]=\"SEARCH_WRAPPER_CLASS\">\n        <div *ngIf=\"searchState === searchStates.Loading\">\n            <span [class]=\"LOADING_CLASS\">{{searchingText}}</span>\n        </div>\n\n        <div *ngIf=\"searchState === searchStates.Finished && searchResult.length === 0\">\n            <span [class]=\"RESULTS_NOT_FOUND_CLASS\">{{notFoundText}}</span>\n        </div>\n\n        <div *ngIf=\"searchState === searchStates.Finished && searchResult?.length > 0\" [class]=\"OPTION_LIST_WRAPPER_CLASS\">\n            <div *ngFor=\"let item of searchResult; index as i\"\n                 remote-autocomplete-option\n                 [itemIndex]=\"i\"\n                 [class]=\"OPTION_CLASS\"\n                 [ngClass]=\"{'autocomplete-option-active': i === itemListService.activeIndex}\"\n                 tabindex=\"-1\">\n                <ng-template #defaultOptionTemplate>\n                    <span [class]=\"OPTION_VALUE_CLASS\">{{item.value}}</span>\n                    <span *ngIf=\"item.description\" [class]=\"OPTION_DESCRIPTION_CLASS\">{{item.description}}</span>\n                </ng-template>\n\n                <ng-template [ngTemplateOutlet]=\"optionTemplate || defaultOptionTemplate\" [ngTemplateOutletContext]=\"{ $implicit: item }\">\n                </ng-template>\n            </div>\n        </div>\n    </div>\n</div>",
                        styles: [".autocomplete-search-wrapper{border:1px solid #ccc;max-height:200px;overflow:auto;max-width:200px}.autocomplete-option-active{background-color:#d3d3d3}"],
                        providers: [
                            AutocompleteService,
                            ItemListService,
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((function () { return RemoteAutocompleteComponent; })),
                                multi: true
                            }
                        ]
                    },] },
        ];
        RemoteAutocompleteComponent.ctorParameters = function () {
            return [
                { type: ItemListService },
                { type: AutocompleteService }
            ];
        };
        RemoteAutocompleteComponent.propDecorators = {
            service: [{ type: core.Input, args: ['service',] }],
            minChars: [{ type: core.Input, args: ['minSearchLength',] }],
            maxChars: [{ type: core.Input, args: ['maxChars',] }],
            pause: [{ type: core.Input, args: ['pause',] }],
            inputId: [{ type: core.Input, args: ['inputId',] }],
            inputName: [{ type: core.Input, args: ['inputName',] }],
            inputClasses: [{ type: core.Input, args: ['inputClass',] }],
            disabled: [{ type: core.Input, args: ['disabled',] }],
            notFoundText: [{ type: core.Input, args: ['notFoundText',] }],
            searchingText: [{ type: core.Input, args: ['searchingText',] }],
            placeholder: [{ type: core.Input, args: ['placeholder',] }],
            searchParameters: [{ type: core.Input, args: ['searchParameters',] }],
            autocompleteAttr: [{ type: core.Input, args: ['autocompleteAttr',] }],
            tabindex: [{ type: core.Input, args: ['tabindex',] }],
            stopEnterPropagationOnSelect: [{ type: core.Input, args: ['stopEnterPropagationOnSelect',] }],
            needToShowNotFoundText: [{ type: core.Input, args: ['needToShowNotFoundText',] }],
            needToShowSearchingText: [{ type: core.Input, args: ['needToShowSearchingText',] }],
            type: [{ type: core.Output, args: ['type',] }],
            highlighted: [{ type: core.Output, args: ['highlighted',] }],
            selected: [{ type: core.Output, args: ['selected',] }],
            blur: [{ type: core.Output, args: ['blur',] }],
            focusEvent: [{ type: core.Output, args: ['focus',] }],
            optionTemplate: [{ type: core.ContentChild, args: [OptionTemplateDirective, { read: core.TemplateRef },] }],
            inputField: [{ type: core.ViewChild, args: ['input',] }]
        };
        return RemoteAutocompleteComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OptionDirective = (function () {
        function OptionDirective(autocompleteService, itemListService) {
            this.autocompleteService = autocompleteService;
            this.itemListService = itemListService;
        }
        /**
         * @param {?} event
         * @return {?}
         */
        OptionDirective.prototype.onMouseEnter = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.itemListService.activeIndex = this.index;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        OptionDirective.prototype.onMouseLeave = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.itemListService.restoreIntialActiveIndex();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        OptionDirective.prototype.onClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.autocompleteService.selectItemSubject.next(this.index);
            };
        OptionDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[remote-autocomplete-option]',
                        host: {
                            '(mouseenter)': 'onMouseEnter($event)',
                            '(mouseleave)': 'onMouseLeave($event)',
                            '(click)': 'onClick($event)'
                        }
                    },] },
        ];
        OptionDirective.ctorParameters = function () {
            return [
                { type: AutocompleteService },
                { type: ItemListService }
            ];
        };
        OptionDirective.propDecorators = {
            index: [{ type: core.Input, args: ['itemIndex',] }]
        };
        return OptionDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var KeyCode = {
        Backspace: 8,
        Tab: 9,
        Enter: 13,
        Shift: 16,
        Ctrl: 17,
        Alt: 18,
        PauseBreak: 19,
        CapsLock: 20,
        Escape: 27,
        Space: 32,
        PageUp: 33,
        PageDown: 34,
        End: 35,
        Home: 36,
        LeftArrow: 37,
        UpArrow: 38,
        RightArrow: 39,
        DownArrow: 40,
        Insert: 45,
        Delete: 46,
        Zero: 48,
        ClosedParen: 48,
        One: 49,
        ExclamationMark: 49,
        Two: 50,
        AtSign: 50,
        Three: 51,
        PoundSign: 51,
        Hash: 51,
        Four: 52,
        DollarSign: 52,
        Five: 53,
        PercentSign: 53,
        Six: 54,
        Caret: 54,
        Hat: 54,
        Seven: 55,
        Ampersand: 55,
        Eight: 56,
        Star: 56,
        Asterik: 56,
        Nine: 57,
        OpenParen: 57,
        A: 65,
        B: 66,
        C: 67,
        D: 68,
        E: 69,
        F: 70,
        G: 71,
        H: 72,
        I: 73,
        J: 74,
        K: 75,
        L: 76,
        M: 77,
        N: 78,
        O: 79,
        P: 80,
        Q: 81,
        R: 82,
        S: 83,
        T: 84,
        U: 85,
        V: 86,
        W: 87,
        X: 88,
        Y: 89,
        Z: 90,
        LeftWindowKey: 91,
        RightWindowKey: 92,
        SelectKey: 93,
        Numpad0: 96,
        Numpad1: 97,
        Numpad2: 98,
        Numpad3: 99,
        Numpad4: 100,
        Numpad5: 101,
        Numpad6: 102,
        Numpad7: 103,
        Numpad8: 104,
        Numpad9: 105,
        Multiply: 106,
        Add: 107,
        Subtract: 109,
        DecimalPoint: 110,
        Divide: 111,
        F1: 112,
        F2: 113,
        F3: 114,
        F4: 115,
        F5: 116,
        F6: 117,
        F7: 118,
        F8: 119,
        F9: 120,
        F10: 121,
        F11: 122,
        F12: 123,
        NumLock: 144,
        ScrollLock: 145,
        SemiColon: 186,
        Equals: 187,
        Comma: 188,
        Dash: 189,
        Period: 190,
        UnderScore: 189,
        PlusSign: 187,
        ForwardSlash: 191,
        Tilde: 192,
        GraveAccent: 192,
        OpenBracket: 219,
        ClosedBracket: 221,
        Quote: 222,
    };
    KeyCode[KeyCode.Backspace] = 'Backspace';
    KeyCode[KeyCode.Tab] = 'Tab';
    KeyCode[KeyCode.Enter] = 'Enter';
    KeyCode[KeyCode.Shift] = 'Shift';
    KeyCode[KeyCode.Ctrl] = 'Ctrl';
    KeyCode[KeyCode.Alt] = 'Alt';
    KeyCode[KeyCode.PauseBreak] = 'PauseBreak';
    KeyCode[KeyCode.CapsLock] = 'CapsLock';
    KeyCode[KeyCode.Escape] = 'Escape';
    KeyCode[KeyCode.Space] = 'Space';
    KeyCode[KeyCode.PageUp] = 'PageUp';
    KeyCode[KeyCode.PageDown] = 'PageDown';
    KeyCode[KeyCode.End] = 'End';
    KeyCode[KeyCode.Home] = 'Home';
    KeyCode[KeyCode.LeftArrow] = 'LeftArrow';
    KeyCode[KeyCode.UpArrow] = 'UpArrow';
    KeyCode[KeyCode.RightArrow] = 'RightArrow';
    KeyCode[KeyCode.DownArrow] = 'DownArrow';
    KeyCode[KeyCode.Insert] = 'Insert';
    KeyCode[KeyCode.Delete] = 'Delete';
    KeyCode[KeyCode.Zero] = 'Zero';
    KeyCode[KeyCode.ClosedParen] = 'ClosedParen';
    KeyCode[KeyCode.One] = 'One';
    KeyCode[KeyCode.ExclamationMark] = 'ExclamationMark';
    KeyCode[KeyCode.Two] = 'Two';
    KeyCode[KeyCode.AtSign] = 'AtSign';
    KeyCode[KeyCode.Three] = 'Three';
    KeyCode[KeyCode.PoundSign] = 'PoundSign';
    KeyCode[KeyCode.Hash] = 'Hash';
    KeyCode[KeyCode.Four] = 'Four';
    KeyCode[KeyCode.DollarSign] = 'DollarSign';
    KeyCode[KeyCode.Five] = 'Five';
    KeyCode[KeyCode.PercentSign] = 'PercentSign';
    KeyCode[KeyCode.Six] = 'Six';
    KeyCode[KeyCode.Caret] = 'Caret';
    KeyCode[KeyCode.Hat] = 'Hat';
    KeyCode[KeyCode.Seven] = 'Seven';
    KeyCode[KeyCode.Ampersand] = 'Ampersand';
    KeyCode[KeyCode.Eight] = 'Eight';
    KeyCode[KeyCode.Star] = 'Star';
    KeyCode[KeyCode.Asterik] = 'Asterik';
    KeyCode[KeyCode.Nine] = 'Nine';
    KeyCode[KeyCode.OpenParen] = 'OpenParen';
    KeyCode[KeyCode.A] = 'A';
    KeyCode[KeyCode.B] = 'B';
    KeyCode[KeyCode.C] = 'C';
    KeyCode[KeyCode.D] = 'D';
    KeyCode[KeyCode.E] = 'E';
    KeyCode[KeyCode.F] = 'F';
    KeyCode[KeyCode.G] = 'G';
    KeyCode[KeyCode.H] = 'H';
    KeyCode[KeyCode.I] = 'I';
    KeyCode[KeyCode.J] = 'J';
    KeyCode[KeyCode.K] = 'K';
    KeyCode[KeyCode.L] = 'L';
    KeyCode[KeyCode.M] = 'M';
    KeyCode[KeyCode.N] = 'N';
    KeyCode[KeyCode.O] = 'O';
    KeyCode[KeyCode.P] = 'P';
    KeyCode[KeyCode.Q] = 'Q';
    KeyCode[KeyCode.R] = 'R';
    KeyCode[KeyCode.S] = 'S';
    KeyCode[KeyCode.T] = 'T';
    KeyCode[KeyCode.U] = 'U';
    KeyCode[KeyCode.V] = 'V';
    KeyCode[KeyCode.W] = 'W';
    KeyCode[KeyCode.X] = 'X';
    KeyCode[KeyCode.Y] = 'Y';
    KeyCode[KeyCode.Z] = 'Z';
    KeyCode[KeyCode.LeftWindowKey] = 'LeftWindowKey';
    KeyCode[KeyCode.RightWindowKey] = 'RightWindowKey';
    KeyCode[KeyCode.SelectKey] = 'SelectKey';
    KeyCode[KeyCode.Numpad0] = 'Numpad0';
    KeyCode[KeyCode.Numpad1] = 'Numpad1';
    KeyCode[KeyCode.Numpad2] = 'Numpad2';
    KeyCode[KeyCode.Numpad3] = 'Numpad3';
    KeyCode[KeyCode.Numpad4] = 'Numpad4';
    KeyCode[KeyCode.Numpad5] = 'Numpad5';
    KeyCode[KeyCode.Numpad6] = 'Numpad6';
    KeyCode[KeyCode.Numpad7] = 'Numpad7';
    KeyCode[KeyCode.Numpad8] = 'Numpad8';
    KeyCode[KeyCode.Numpad9] = 'Numpad9';
    KeyCode[KeyCode.Multiply] = 'Multiply';
    KeyCode[KeyCode.Add] = 'Add';
    KeyCode[KeyCode.Subtract] = 'Subtract';
    KeyCode[KeyCode.DecimalPoint] = 'DecimalPoint';
    KeyCode[KeyCode.Divide] = 'Divide';
    KeyCode[KeyCode.F1] = 'F1';
    KeyCode[KeyCode.F2] = 'F2';
    KeyCode[KeyCode.F3] = 'F3';
    KeyCode[KeyCode.F4] = 'F4';
    KeyCode[KeyCode.F5] = 'F5';
    KeyCode[KeyCode.F6] = 'F6';
    KeyCode[KeyCode.F7] = 'F7';
    KeyCode[KeyCode.F8] = 'F8';
    KeyCode[KeyCode.F9] = 'F9';
    KeyCode[KeyCode.F10] = 'F10';
    KeyCode[KeyCode.F11] = 'F11';
    KeyCode[KeyCode.F12] = 'F12';
    KeyCode[KeyCode.NumLock] = 'NumLock';
    KeyCode[KeyCode.ScrollLock] = 'ScrollLock';
    KeyCode[KeyCode.SemiColon] = 'SemiColon';
    KeyCode[KeyCode.Equals] = 'Equals';
    KeyCode[KeyCode.Comma] = 'Comma';
    KeyCode[KeyCode.Dash] = 'Dash';
    KeyCode[KeyCode.Period] = 'Period';
    KeyCode[KeyCode.UnderScore] = 'UnderScore';
    KeyCode[KeyCode.PlusSign] = 'PlusSign';
    KeyCode[KeyCode.ForwardSlash] = 'ForwardSlash';
    KeyCode[KeyCode.Tilde] = 'Tilde';
    KeyCode[KeyCode.GraveAccent] = 'GraveAccent';
    KeyCode[KeyCode.OpenBracket] = 'OpenBracket';
    KeyCode[KeyCode.ClosedBracket] = 'ClosedBracket';
    KeyCode[KeyCode.Quote] = 'Quote';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ScrollService = (function () {
        function ScrollService(element) {
            this.element = element;
        }
        /**
         * @param {?} activeIndex
         * @return {?}
         */
        ScrollService.prototype.handleKeyboarOptionNavigation = /**
         * @param {?} activeIndex
         * @return {?}
         */
            function (activeIndex) {
                /** @type {?} */
                var autocompleteElement = ((this.element.nativeElement));
                /** @type {?} */
                var listElement = autocompleteElement.querySelector("." + SEARCH_WRAPPER_CLASS);
                if (listElement) {
                    if (activeIndex === DEFAULT_ACTIVE_INDEX) {
                        listElement.scrollTo(0, 0);
                        return;
                    }
                    /** @type {?} */
                    var optionElements = listElement.querySelectorAll("." + OPTION_CLASS);
                    /** @type {?} */
                    var activeElement = optionElements[activeIndex];
                    /** @type {?} */
                    var listTop = listElement.getBoundingClientRect().top;
                    /** @type {?} */
                    var listBottom = listTop + listElement.clientHeight;
                    /** @type {?} */
                    var elementTop = activeElement.getBoundingClientRect().top;
                    /** @type {?} */
                    var elementBottom = elementTop + activeElement.clientHeight;
                    if (listTop > elementTop) {
                        activeElement.scrollIntoView(true);
                    }
                    if (listBottom < elementBottom) {
                        activeElement.scrollIntoView(false);
                    }
                }
            };
        return ScrollService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var KeyboardNavigationDirective = (function () {
        function KeyboardNavigationDirective(autocompleteService, itemListService, element) {
            this.autocompleteService = autocompleteService;
            this.itemListService = itemListService;
            this.element = element;
            this.stopEnterPropagation = false;
            this.scrollService = new ScrollService(element);
        }
        /**
         * @param {?} event
         * @return {?}
         */
        KeyboardNavigationDirective.prototype.onKeydown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var key = event.which || event.keyCode;
                switch (key) {
                    case KeyCode.DownArrow:
                        this.handleDownKey(event);
                        break;
                    case KeyCode.UpArrow:
                        this.handleUpKey(event);
                        break;
                    case KeyCode.Enter:
                        this.handleEnter(event);
                        break;
                }
            };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        KeyboardNavigationDirective.prototype.handleDownKey = /**
         * @private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.itemListService.activeIndex++;
                this.scrollService.handleKeyboarOptionNavigation(this.itemListService.activeIndex);
            };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        KeyboardNavigationDirective.prototype.handleUpKey = /**
         * @private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.itemListService.activeIndex--;
                this.scrollService.handleKeyboarOptionNavigation(this.itemListService.activeIndex);
            };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        KeyboardNavigationDirective.prototype.handleEnter = /**
         * @private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.itemListService.activeIndex >= 0) {
                    this.autocompleteService.selectItemSubject.next(this.itemListService.activeIndex);
                    event.preventDefault();
                    if (this.stopEnterPropagation) {
                        event.stopPropagation();
                    }
                }
            };
        KeyboardNavigationDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[keyboard-navigation]'
                    },] },
        ];
        KeyboardNavigationDirective.ctorParameters = function () {
            return [
                { type: AutocompleteService },
                { type: ItemListService },
                { type: core.ElementRef }
            ];
        };
        KeyboardNavigationDirective.propDecorators = {
            stopEnterPropagation: [{ type: core.Input }],
            onKeydown: [{ type: core.HostListener, args: ['keydown', ['$event'],] }]
        };
        return KeyboardNavigationDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RemoteAutocompleteModule = (function () {
        function RemoteAutocompleteModule() {
        }
        RemoteAutocompleteModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule
                        ],
                        declarations: [
                            RemoteAutocompleteComponent,
                            OptionTemplateDirective,
                            OptionDirective,
                            KeyboardNavigationDirective
                        ],
                        exports: [
                            RemoteAutocompleteComponent,
                            OptionTemplateDirective
                        ],
                    },] },
        ];
        return RemoteAutocompleteModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.RemoteAutocompleteModule = RemoteAutocompleteModule;
    exports.RemoteAutocompleteComponent = RemoteAutocompleteComponent;
    exports.OptionTemplateDirective = OptionTemplateDirective;
    exports.ɵd = KeyboardNavigationDirective;
    exports.ɵc = OptionDirective;
    exports.ɵa = AutocompleteService;
    exports.ɵb = ItemListService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcmVtb3RlLWF1dG9jb21wbGV0ZS51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL25nLXJlbW90ZS1hdXRvY29tcGxldGUvYXBwL2NvbnN0YW50cy9hdXRvY29tcGxldGUuY29uc3RhbnRzLnRzIiwibmc6Ly9uZy1yZW1vdGUtYXV0b2NvbXBsZXRlL2FwcC9lbnVtcy9zZWFyY2gtc3RhdGUudHlwZS50cyIsIm5nOi8vbmctcmVtb3RlLWF1dG9jb21wbGV0ZS9hcHAvZGlyZWN0aXZlcy9vcHRpb24tdGVtcGxhdGUuZGlyZWN0aXZlLnRzIiwibmc6Ly9uZy1yZW1vdGUtYXV0b2NvbXBsZXRlL2FwcC9zZXJ2aWNlcy9hdXRvY29tcGxldGUuc2VydmljZS50cyIsIm5nOi8vbmctcmVtb3RlLWF1dG9jb21wbGV0ZS9hcHAvc2VydmljZXMvaXRlbS1saXN0LnNlcnZpY2UudHMiLCJuZzovL25nLXJlbW90ZS1hdXRvY29tcGxldGUvYXBwL2NvbXBvbmVudHMvYXV0b2NvbXBsZXRlLmNvbXBvbmVudC50cyIsIm5nOi8vbmctcmVtb3RlLWF1dG9jb21wbGV0ZS9hcHAvZGlyZWN0aXZlcy9vcHRpb24tZGlyZWN0aXZlLnRzIiwibmc6Ly9uZy1yZW1vdGUtYXV0b2NvbXBsZXRlL2FwcC9lbnVtcy9rZXkta29kZS50cyIsIm5nOi8vbmctcmVtb3RlLWF1dG9jb21wbGV0ZS9hcHAvc2VydmljZXMvc2Nyb2xsLXNlcnZpY2UudHMiLCJuZzovL25nLXJlbW90ZS1hdXRvY29tcGxldGUvYXBwL2RpcmVjdGl2ZXMva2V5Ym9hcmQtbmF2aWdhdGlvbi5kaXJlY3RpdmUudHMiLCJuZzovL25nLXJlbW90ZS1hdXRvY29tcGxldGUvYXBwL2F1dG9jb21wbGV0ZS5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IERFRkFVTFRfQUNUSVZFX0lOREVYOiBudW1iZXIgPSAtMTtcclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfTUlOX1NFQVJDSF9MRU5HVEg6IG51bWJlciA9IDE7XHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX01BWF9DSEFSUzogbnVtYmVyID0gMjE0NzQ4MzY0NztcclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfUEFVU0U6IG51bWJlciA9IDEwMDtcclxuXHJcbmV4cG9ydCBjb25zdCBOT1RfRk9VTkRfVEVYVDogc3RyaW5nID0gXCJObyByZXN1bHRzIGZvdW5kXCI7XHJcbmV4cG9ydCBjb25zdCBTRUFSQ0hJTkdfVEVYVDogc3RyaW5nID0gXCJTZWFyY2hpbmcuLi5cIjtcclxuXHJcbmV4cG9ydCBjb25zdCBTRUFSQ0hfV1JBUFBFUl9DTEFTUzogc3RyaW5nID0gXCJhdXRvY29tcGxldGUtc2VhcmNoLXdyYXBwZXJcIjtcclxuZXhwb3J0IGNvbnN0IE9QVElPTl9WQUxVRV9DTEFTUzogc3RyaW5nID0gXCJhdXRvY29tcGxldGUtb3B0aW9uLXZhbHVlXCI7XHJcbmV4cG9ydCBjb25zdCBPUFRJT05fREVTQ1JJUFRJT05fQ0xBU1M6IHN0cmluZyA9IFwiYXV0b2NvbXBsZXRlLW9wdGlvbi1kZXNjcmlwdGlvblwiO1xyXG5leHBvcnQgY29uc3QgT1BUSU9OX0NMQVNTOiBzdHJpbmcgPSBcImF1dG9jb21wbGV0ZS1vcHRpb25cIjtcclxuZXhwb3J0IGNvbnN0IE9QVElPTl9MSVNUX1dSQVBQRVJfQ0xBU1M6IHN0cmluZyA9IFwib3B0aW9uLWxpc3Qtd3JhcHBlclwiO1xyXG5leHBvcnQgY29uc3QgTE9BRElOR19DTEFTUzogc3RyaW5nID0gXCJhdXRvY29tcGxldGUtbG9hZGluZ1wiO1xyXG5leHBvcnQgY29uc3QgUkVTVUxUU19OT1RfRk9VTkRfQ0xBU1M6IHN0cmluZyA9IFwiYXV0b2NvbXBsZXRlLW5vdC1mb3VuZFwiOyIsImV4cG9ydCBlbnVtIFNlYXJjaFN0YXRlVHlwZSB7XHJcbiAgICBVbnRyYWNrZWQsXHJcbiAgICBMb2FkaW5nLFxyXG4gICAgRmluaXNoZWRcclxufSIsImltcG9ydCB7IERpcmVjdGl2ZSwgVGVtcGxhdGVSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tyZW1vdGUtYXV0b2NvbXBsZXRlLW9wdGlvbi10bXBsXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIE9wdGlvblRlbXBsYXRlRGlyZWN0aXZlIHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55Pikge1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tIFwicnhqcy9TdWJqZWN0XCI7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBBdXRvY29tcGxldGVTZXJ2aWNlIHtcclxuICAgIHB1YmxpYyBjaGFuZ2VkSGlnaGxpZ2h0SXRlbVN1YmplY3Q6IFN1YmplY3Q8bnVtYmVyPiA9IG5ldyBTdWJqZWN0PG51bWJlcj4oKTtcclxuICAgIHB1YmxpYyBzZWxlY3RJdGVtU3ViamVjdDogU3ViamVjdDxudW1iZXI+ID0gbmV3IFN1YmplY3Q8bnVtYmVyPigpO1xyXG5cclxuICAgIHByaXZhdGUgX2lzT3BlbjogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIHNldCBpc09wZW4odmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9pc09wZW4gPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXNPcGVuKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc09wZW47XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuXHJcbmltcG9ydCB7IEF1dG9jb21wbGV0ZVNlcnZpY2UgfSBmcm9tIFwiLi9hdXRvY29tcGxldGUuc2VydmljZVwiO1xyXG5pbXBvcnQgeyBERUZBVUxUX0FDVElWRV9JTkRFWCB9IGZyb20gXCIuLi9jb25zdGFudHMvYXV0b2NvbXBsZXRlLmNvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBBdXRvY29tcGxldGVJdGVtIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvYXV0b2NvbXBsZXRlLml0ZW1cIjtcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEl0ZW1MaXN0U2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGF1dG9jb21wbGV0ZVNlcnZpY2U6IEF1dG9jb21wbGV0ZVNlcnZpY2UpIHtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9hY3RpdmVJbmRleDogbnVtYmVyID0gREVGQVVMVF9BQ1RJVkVfSU5ERVg7XHJcblxyXG4gICAgcHVibGljIGl0ZW1zOiBBdXRvY29tcGxldGVJdGVtW10gPSBbXTtcclxuXHJcbiAgICBzZXQgYWN0aXZlSW5kZXgoaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLmF1dG9jb21wbGV0ZVNlcnZpY2UuaXNPcGVuKSB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+PSB0aGlzLml0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXN0b3JlSW50aWFsQWN0aXZlSW5kZXgoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGlmIChpbmRleCA8IERFRkFVTFRfQUNUSVZFX0lOREVYKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVJbmRleCA9IHRoaXMuaXRlbXMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlU2VydmljZS5jaGFuZ2VkSGlnaGxpZ2h0SXRlbVN1YmplY3QubmV4dCh0aGlzLl9hY3RpdmVJbmRleCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZUluZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlU2VydmljZS5jaGFuZ2VkSGlnaGxpZ2h0SXRlbVN1YmplY3QubmV4dCh0aGlzLl9hY3RpdmVJbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBhY3RpdmVJbmRleCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVJbmRleDtcclxuICAgIH1cclxuXHJcbiAgICByZXN0b3JlSW50aWFsQWN0aXZlSW5kZXgoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlSW5kZXggPSBERUZBVUxUX0FDVElWRV9JTkRFWDtcclxuICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZVNlcnZpY2UuY2hhbmdlZEhpZ2hsaWdodEl0ZW1TdWJqZWN0Lm5leHQodGhpcy5fYWN0aXZlSW5kZXgpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtcclxuICAgIENvbXBvbmVudCxcclxuICAgIE9uSW5pdCxcclxuICAgIElucHV0LFxyXG4gICAgT3V0cHV0LFxyXG4gICAgRXZlbnRFbWl0dGVyLFxyXG4gICAgQ29udGVudENoaWxkLFxyXG4gICAgVGVtcGxhdGVSZWYsXHJcbiAgICBPbkRlc3Ryb3ksXHJcbiAgICBmb3J3YXJkUmVmLFxyXG4gICAgVmlld0NoaWxkLFxyXG4gICAgRWxlbWVudFJlZlxyXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcblxyXG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcclxuXHJcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMvUngnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anMvT2JzZXJ2YWJsZVwiO1xyXG5cclxuaW1wb3J0IHsgQXV0b2NvbXBsZXRlSXRlbSB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL2F1dG9jb21wbGV0ZS5pdGVtXCI7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgREVGQVVMVF9NQVhfQ0hBUlMsXHJcbiAgICBERUZBVUxUX01JTl9TRUFSQ0hfTEVOR1RILFxyXG4gICAgREVGQVVMVF9QQVVTRSxcclxuICAgIE5PVF9GT1VORF9URVhULFxyXG4gICAgU0VBUkNISU5HX1RFWFQsXHJcbiAgICBERUZBVUxUX0FDVElWRV9JTkRFWCxcclxuICAgIFNFQVJDSF9XUkFQUEVSX0NMQVNTLFxyXG4gICAgT1BUSU9OX0xJU1RfV1JBUFBFUl9DTEFTUyxcclxuICAgIE9QVElPTl9DTEFTUyxcclxuICAgIE9QVElPTl9WQUxVRV9DTEFTUyxcclxuICAgIE9QVElPTl9ERVNDUklQVElPTl9DTEFTUyxcclxuICAgIExPQURJTkdfQ0xBU1MsXHJcbiAgICBSRVNVTFRTX05PVF9GT1VORF9DTEFTU1xyXG59IGZyb20gXCIuLi9jb25zdGFudHMvYXV0b2NvbXBsZXRlLmNvbnN0YW50c1wiO1xyXG5cclxuaW1wb3J0IHsgU2VhcmNoU3RhdGVUeXBlIH0gZnJvbSBcIi4uL2VudW1zL3NlYXJjaC1zdGF0ZS50eXBlXCI7XHJcbmltcG9ydCB7IE9wdGlvblRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSBcIi4uL2RpcmVjdGl2ZXMvb3B0aW9uLXRlbXBsYXRlLmRpcmVjdGl2ZVwiO1xyXG5pbXBvcnQgeyBJdGVtTGlzdFNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZXMvaXRlbS1saXN0LnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgQXV0b2NvbXBsZXRlU291cmNlU2VydmljZSB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL2F1dG9jb21wbGV0ZS1zb3VyY2Uuc2VydmljZVwiO1xyXG5pbXBvcnQgeyBBdXRvY29tcGxldGVTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2F1dG9jb21wbGV0ZS5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IFBhcmFtZXRlcml6ZWRBdXRvY29tcGxldGVTb3VyY2VTZXJ2aWNlIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvcGFyYW1ldGVyaXplZC1hdXRvY29tcGxldGUtc291cnNlLnNlcnZpc2VcIjtcclxuaW1wb3J0IHsgQXV0b2NvbXBsZXRlIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvYXV0b2NvbXBsZXRlXCI7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAncmVtb3RlLWF1dG9jb21wbGV0ZScsXHJcbiAgICB0ZW1wbGF0ZTogYDxkaXYga2V5Ym9hcmQtbmF2aWdhdGlvbiBbc3RvcEVudGVyUHJvcGFnYXRpb25dPVwic3RvcEVudGVyUHJvcGFnYXRpb25PblNlbGVjdFwiIGNsYXNzPVwicmVtb3RlLWF1dG9jb21wbGV0ZVwiPlxyXG4gICAgPGlucHV0IFsobmdNb2RlbCldPVwic2VhcmNoVmFsdWVcIlxyXG4gICAgICAgICAgIFthdHRyLmlkXT1cImlucHV0SWRcIlxyXG4gICAgICAgICAgIFthdHRyLm5hbWVdPVwiaW5wdXROYW1lXCJcclxuICAgICAgICAgICBbYXR0ci5jbGFzc109XCJpbnB1dENsYXNzXCJcclxuICAgICAgICAgICBbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxyXG4gICAgICAgICAgIFthdHRyLnBsYWNlaG9sZGVyXT1cInBsYWNlaG9sZGVyXCJcclxuICAgICAgICAgICBbYXR0ci5hdXRvY29tcGxldGVdPVwiYXV0b2NvbXBsZXRlQXR0clwiXHJcbiAgICAgICAgICAgW2F0dHIudGFiaW5kZXhdPVwidGFiaW5kZXhcIlxyXG4gICAgICAgICAgIG1heGxlbmd0aD1cInt7bWF4Q2hhcnN9fVwiXHJcbiAgICAgICAgICAgKGlucHV0KT1cIm9uVHlwZSgpXCJcclxuICAgICAgICAgICAoYmx1cik9XCJvbklucHV0Qmx1cigkZXZlbnQpXCJcclxuICAgICAgICAgICAoZm9jdXMpPVwib25JbnB1dEZvY3VzKCRldmVudClcIlxyXG4gICAgICAgICAgICNpbnB1dCAvPlxyXG4gICAgPGRpdiAqbmdJZj1cInNlYXJjaFN0YXRlID09PSBzZWFyY2hTdGF0ZXMuTG9hZGluZyAmJiBuZWVkVG9TaG93U2VhcmNoaW5nVGV4dCB8fCBcclxuICAgICAgICAgICAgICAgIHNlYXJjaFN0YXRlID09PSBzZWFyY2hTdGF0ZXMuRmluaXNoZWQgJiYgKHNlYXJjaFJlc3VsdD8ubGVuZ3RoID4gMCB8fCBuZWVkVG9TaG93Tm90Rm91bmRUZXh0KVwiIFtjbGFzc109XCJTRUFSQ0hfV1JBUFBFUl9DTEFTU1wiPlxyXG4gICAgICAgIDxkaXYgKm5nSWY9XCJzZWFyY2hTdGF0ZSA9PT0gc2VhcmNoU3RhdGVzLkxvYWRpbmdcIj5cclxuICAgICAgICAgICAgPHNwYW4gW2NsYXNzXT1cIkxPQURJTkdfQ0xBU1NcIj57e3NlYXJjaGluZ1RleHR9fTwvc3Bhbj5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPGRpdiAqbmdJZj1cInNlYXJjaFN0YXRlID09PSBzZWFyY2hTdGF0ZXMuRmluaXNoZWQgJiYgc2VhcmNoUmVzdWx0Lmxlbmd0aCA9PT0gMFwiPlxyXG4gICAgICAgICAgICA8c3BhbiBbY2xhc3NdPVwiUkVTVUxUU19OT1RfRk9VTkRfQ0xBU1NcIj57e25vdEZvdW5kVGV4dH19PC9zcGFuPlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICA8ZGl2ICpuZ0lmPVwic2VhcmNoU3RhdGUgPT09IHNlYXJjaFN0YXRlcy5GaW5pc2hlZCAmJiBzZWFyY2hSZXN1bHQ/Lmxlbmd0aCA+IDBcIiBbY2xhc3NdPVwiT1BUSU9OX0xJU1RfV1JBUFBFUl9DTEFTU1wiPlxyXG4gICAgICAgICAgICA8ZGl2ICpuZ0Zvcj1cImxldCBpdGVtIG9mIHNlYXJjaFJlc3VsdDsgaW5kZXggYXMgaVwiXHJcbiAgICAgICAgICAgICAgICAgcmVtb3RlLWF1dG9jb21wbGV0ZS1vcHRpb25cclxuICAgICAgICAgICAgICAgICBbaXRlbUluZGV4XT1cImlcIlxyXG4gICAgICAgICAgICAgICAgIFtjbGFzc109XCJPUFRJT05fQ0xBU1NcIlxyXG4gICAgICAgICAgICAgICAgIFtuZ0NsYXNzXT1cInsnYXV0b2NvbXBsZXRlLW9wdGlvbi1hY3RpdmUnOiBpID09PSBpdGVtTGlzdFNlcnZpY2UuYWN0aXZlSW5kZXh9XCJcclxuICAgICAgICAgICAgICAgICB0YWJpbmRleD1cIi0xXCI+XHJcbiAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgI2RlZmF1bHRPcHRpb25UZW1wbGF0ZT5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBbY2xhc3NdPVwiT1BUSU9OX1ZBTFVFX0NMQVNTXCI+e3tpdGVtLnZhbHVlfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gKm5nSWY9XCJpdGVtLmRlc2NyaXB0aW9uXCIgW2NsYXNzXT1cIk9QVElPTl9ERVNDUklQVElPTl9DTEFTU1wiPnt7aXRlbS5kZXNjcmlwdGlvbn19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cclxuXHJcbiAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgW25nVGVtcGxhdGVPdXRsZXRdPVwib3B0aW9uVGVtcGxhdGUgfHwgZGVmYXVsdE9wdGlvblRlbXBsYXRlXCIgW25nVGVtcGxhdGVPdXRsZXRDb250ZXh0XT1cInsgJGltcGxpY2l0OiBpdGVtIH1cIj5cclxuICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvZGl2PmAsXHJcbiAgICBzdHlsZXM6IFtgLmF1dG9jb21wbGV0ZS1zZWFyY2gtd3JhcHBlcntib3JkZXI6MXB4IHNvbGlkICNjY2M7bWF4LWhlaWdodDoyMDBweDtvdmVyZmxvdzphdXRvO21heC13aWR0aDoyMDBweH0uYXV0b2NvbXBsZXRlLW9wdGlvbi1hY3RpdmV7YmFja2dyb3VuZC1jb2xvcjojZDNkM2QzfWBdLFxyXG4gICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgQXV0b2NvbXBsZXRlU2VydmljZSxcclxuICAgICAgICBJdGVtTGlzdFNlcnZpY2UsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcclxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gUmVtb3RlQXV0b2NvbXBsZXRlQ29tcG9uZW50KSxcclxuICAgICAgICAgICAgbXVsdGk6IHRydWVcclxuICAgICAgICB9XHJcbiAgICBdXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgUmVtb3RlQXV0b2NvbXBsZXRlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBBdXRvY29tcGxldGUge1xyXG4gICAgQElucHV0KCdzZXJ2aWNlJykgc2VydmljZTogQXV0b2NvbXBsZXRlU291cmNlU2VydmljZSB8IFBhcmFtZXRlcml6ZWRBdXRvY29tcGxldGVTb3VyY2VTZXJ2aWNlO1xyXG4gICAgQElucHV0KCdtaW5TZWFyY2hMZW5ndGgnKSBtaW5DaGFyczogbnVtYmVyO1xyXG4gICAgQElucHV0KCdtYXhDaGFycycpIG1heENoYXJzOiBudW1iZXI7XHJcbiAgICBASW5wdXQoJ3BhdXNlJykgcGF1c2U6IG51bWJlcjtcclxuICAgIEBJbnB1dCgnaW5wdXRJZCcpIGlucHV0SWQ6IHN0cmluZztcclxuICAgIEBJbnB1dCgnaW5wdXROYW1lJykgaW5wdXROYW1lOiBzdHJpbmc7XHJcbiAgICBASW5wdXQoJ2lucHV0Q2xhc3MnKSBpbnB1dENsYXNzZXM6IHN0cmluZ1tdO1xyXG4gICAgQElucHV0KCdkaXNhYmxlZCcpIGRpc2FibGVkOiBib29sZWFuO1xyXG4gICAgQElucHV0KCdub3RGb3VuZFRleHQnKSBub3RGb3VuZFRleHQ6IHN0cmluZztcclxuICAgIEBJbnB1dCgnc2VhcmNoaW5nVGV4dCcpIHNlYXJjaGluZ1RleHQ6IHN0cmluZztcclxuICAgIEBJbnB1dCgncGxhY2Vob2xkZXInKSBwbGFjZWhvbGRlcjogc3RyaW5nO1xyXG4gICAgQElucHV0KCdzZWFyY2hQYXJhbWV0ZXJzJykgc2VhcmNoUGFyYW1ldGVyczogYW55O1xyXG4gICAgQElucHV0KCdhdXRvY29tcGxldGVBdHRyJykgYXV0b2NvbXBsZXRlQXR0cjogc3RyaW5nO1xyXG4gICAgQElucHV0KCd0YWJpbmRleCcpIHRhYmluZGV4OiBudW1iZXI7XHJcbiAgICBASW5wdXQoJ3N0b3BFbnRlclByb3BhZ2F0aW9uT25TZWxlY3QnKSBzdG9wRW50ZXJQcm9wYWdhdGlvbk9uU2VsZWN0OiBib29sZWFuID0gZmFsc2U7XHJcblx0QElucHV0KCduZWVkVG9TaG93Tm90Rm91bmRUZXh0JykgbmVlZFRvU2hvd05vdEZvdW5kVGV4dDogYm9vbGVhbiA9IHRydWU7XHJcblx0QElucHV0KCduZWVkVG9TaG93U2VhcmNoaW5nVGV4dCcpIG5lZWRUb1Nob3dTZWFyY2hpbmdUZXh0OiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgICBAT3V0cHV0KCd0eXBlJykgdHlwZTogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xyXG4gICAgQE91dHB1dCgnaGlnaGxpZ2h0ZWQnKSBoaWdobGlnaHRlZDogRXZlbnRFbWl0dGVyPEF1dG9jb21wbGV0ZUl0ZW0+ID0gbmV3IEV2ZW50RW1pdHRlcjxBdXRvY29tcGxldGVJdGVtPigpO1xyXG4gICAgQE91dHB1dCgnc2VsZWN0ZWQnKSBzZWxlY3RlZDogRXZlbnRFbWl0dGVyPEF1dG9jb21wbGV0ZUl0ZW0+ID0gbmV3IEV2ZW50RW1pdHRlcjxBdXRvY29tcGxldGVJdGVtPigpO1xyXG4gICAgQE91dHB1dCgnYmx1cicpIGJsdXI6IEV2ZW50RW1pdHRlcjxFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPEV2ZW50PigpO1xyXG4gICAgQE91dHB1dCgnZm9jdXMnKSBmb2N1c0V2ZW50OiBFdmVudEVtaXR0ZXI8RXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxFdmVudD4oKTtcclxuXHJcbiAgICAvL2N1c3RvbSB0ZW1wbGF0ZVxyXG4gICAgQENvbnRlbnRDaGlsZChPcHRpb25UZW1wbGF0ZURpcmVjdGl2ZSwgeyByZWFkOiBUZW1wbGF0ZVJlZiB9KSBvcHRpb25UZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcclxuXHJcbiAgICBAVmlld0NoaWxkKCdpbnB1dCcpIGlucHV0RmllbGQ6IEVsZW1lbnRSZWY7XHJcblxyXG4gICAgcHVibGljIHNlYXJjaFN0YXRlcyA9IFNlYXJjaFN0YXRlVHlwZTtcclxuICAgIHB1YmxpYyBzZWFyY2hTdGF0ZSA9IFNlYXJjaFN0YXRlVHlwZS5VbnRyYWNrZWQ7XHJcbiAgICBwdWJsaWMgc2VhcmNoVmFsdWU6IHN0cmluZztcclxuICAgIHB1YmxpYyBzZWFyY2hSZXN1bHQ6IEF1dG9jb21wbGV0ZUl0ZW1bXTtcclxuICAgIHB1YmxpYyBTRUFSQ0hfV1JBUFBFUl9DTEFTUzogc3RyaW5nID0gU0VBUkNIX1dSQVBQRVJfQ0xBU1M7XHJcbiAgICBwdWJsaWMgT1BUSU9OX0xJU1RfV1JBUFBFUl9DTEFTUzogc3RyaW5nID0gT1BUSU9OX0xJU1RfV1JBUFBFUl9DTEFTUztcclxuICAgIHB1YmxpYyBPUFRJT05fQ0xBU1M6IHN0cmluZyA9IE9QVElPTl9DTEFTUztcclxuICAgIHB1YmxpYyBPUFRJT05fVkFMVUVfQ0xBU1M6IHN0cmluZyA9IE9QVElPTl9WQUxVRV9DTEFTUztcclxuICAgIHB1YmxpYyBPUFRJT05fREVTQ1JJUFRJT05fQ0xBU1M6IHN0cmluZyA9IE9QVElPTl9ERVNDUklQVElPTl9DTEFTUztcclxuICAgIHB1YmxpYyBMT0FESU5HX0NMQVNTOiBzdHJpbmcgPSBMT0FESU5HX0NMQVNTO1xyXG4gICAgcHVibGljIFJFU1VMVFNfTk9UX0ZPVU5EX0NMQVNTOiBzdHJpbmcgPSBSRVNVTFRTX05PVF9GT1VORF9DTEFTUztcclxuXHJcbiAgICBwcml2YXRlIHR5cGluZ1RpbWVvdXQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgb3JpZ2luYWxTZWFyY2hWYWx1ZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBjaGFuZ2VkSGlnaGxpZ2h0U3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XHJcbiAgICBwcml2YXRlIHNlbGVjdFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xyXG4gICAgcHJpdmF0ZSBwcm9wYWdhdGVDaGFuZ2UgPSAoXzogYW55KSA9PiB7IH07XHJcbiAgICBwcml2YXRlIHByb3BhZ2F0ZVRvdWNoZWQgPSAoXzogYW55KSA9PiB7IH07XHJcblxyXG4gICAgY29uc3RydWN0b3IocHVibGljIGl0ZW1MaXN0U2VydmljZTogSXRlbUxpc3RTZXJ2aWNlLFxyXG4gICAgICAgIHB1YmxpYyBhdXRvY29tcGxldGVTZXJ2aWNlOiBBdXRvY29tcGxldGVTZXJ2aWNlKSB7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52YWxpZGF0ZVNlcnZpY2UoKTtcclxuXHJcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IHRoaXMuZ2V0RGVmYXVsdElmTnVsbE9yVW5kZWZpbmVkKHRoaXMuZGlzYWJsZWQsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLm1pbkNoYXJzID0gdGhpcy5nZXREZWZhdWx0SWZOdWxsT3JVbmRlZmluZWQodGhpcy5taW5DaGFycywgREVGQVVMVF9NSU5fU0VBUkNIX0xFTkdUSCk7XHJcbiAgICAgICAgdGhpcy5tYXhDaGFycyA9IHRoaXMubWF4Q2hhcnMgfHwgREVGQVVMVF9NQVhfQ0hBUlM7XHJcbiAgICAgICAgdGhpcy5wYXVzZSA9IHRoaXMucGF1c2UgfHwgREVGQVVMVF9QQVVTRTtcclxuICAgICAgICB0aGlzLm5vdEZvdW5kVGV4dCA9IHRoaXMubm90Rm91bmRUZXh0IHx8IE5PVF9GT1VORF9URVhUO1xyXG4gICAgICAgIHRoaXMuc2VhcmNoaW5nVGV4dCA9IHRoaXMuc2VhcmNoaW5nVGV4dCB8fCBTRUFSQ0hJTkdfVEVYVDtcclxuXHJcbiAgICAgICAgdGhpcy5jaGFuZ2VkSGlnaGxpZ2h0U3Vic2NyaXB0aW9uID0gdGhpcy5hdXRvY29tcGxldGVTZXJ2aWNlLmNoYW5nZWRIaWdobGlnaHRJdGVtU3ViamVjdC5zdWJzY3JpYmUoKGluZGV4OiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5vbkFjdGl2ZUluZGV4Q2hhbmdlZChpbmRleCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuc2VsZWN0U3Vic2NyaXB0aW9uID0gdGhpcy5hdXRvY29tcGxldGVTZXJ2aWNlLnNlbGVjdEl0ZW1TdWJqZWN0LnN1YnNjcmliZSgoaW5kZXg6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnNlYXJjaFJlc3VsdFtpbmRleF07XHJcbiAgICAgICAgICAgIHRoaXMucHJvcGFnYXRlQ2hhbmdlKHJlc3VsdC52YWx1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWQuZW1pdChyZXN1bHQpO1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VkSGlnaGxpZ2h0U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuXHJcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpIHtcclxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlYXJjaFZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSkge1xyXG4gICAgICAgIHRoaXMucHJvcGFnYXRlQ2hhbmdlID0gZm47XHJcbiAgICB9XHJcblxyXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSkge1xyXG4gICAgICAgIHRoaXMucHJvcGFnYXRlVG91Y2hlZCA9IGZuO1xyXG4gICAgfVxyXG5cclxuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xyXG4gICAgfVxyXG5cclxuICAgIG9uVHlwZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnByb3BhZ2F0ZUNoYW5nZSh0aGlzLnNlYXJjaFZhbHVlKTtcclxuICAgICAgICB0aGlzLm9yaWdpbmFsU2VhcmNoVmFsdWUgPSB0aGlzLnNlYXJjaFZhbHVlO1xyXG4gICAgICAgIHRoaXMudHlwZS5lbWl0KCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnZhbGlkc2VhcmNoVGVybSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoU3RhdGUgPSB0aGlzLnNlYXJjaFN0YXRlcy5Mb2FkaW5nO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucmVzZXRTZWFyY2hUaW1lb3V0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25JbnB1dEJsdXIoZXZlbnQ6IEZvY3VzRXZlbnQpIHtcclxuICAgICAgICBpZiAoZXZlbnQucmVsYXRlZFRhcmdldCkge1xyXG4gICAgICAgICAgICBsZXQgcmVsYXRlZCA9IDxIVE1MRWxlbWVudD5ldmVudC5yZWxhdGVkVGFyZ2V0O1xyXG4gICAgICAgICAgICBpZiAocmVsYXRlZC5jbGFzc0xpc3QuY29udGFpbnModGhpcy5PUFRJT05fQ0xBU1MpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucHJvcGFnYXRlVG91Y2hlZCh0aGlzLnNlYXJjaFZhbHVlKTtcclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgdGhpcy5ibHVyLmVtaXQoZXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uSW5wdXRGb2N1cyhldmVudDogRXZlbnQpIHtcclxuICAgICAgICB0aGlzLmZvY3VzRXZlbnQuZW1pdChldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlucHV0Q2xhc3MoKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgY2xhc3Nlczogc3RyaW5nID0gJyc7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlucHV0Q2xhc3Nlcykge1xyXG4gICAgICAgICAgICBjbGFzc2VzID0gdGhpcy5pbnB1dENsYXNzZXMuam9pbignICcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNsYXNzZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZm9jdXMoKSB7XHJcbiAgICAgICAgKDxIVE1MSW5wdXRFbGVtZW50PnRoaXMuaW5wdXRGaWVsZC5uYXRpdmVFbGVtZW50KS5mb2N1cygpO1xyXG4gICAgfVxyXG5cclxuICAgIG9wZW4oKSB7XHJcbiAgICAgICAgdGhpcy5vblR5cGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZVNlcnZpY2UuaXNPcGVuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zZWFyY2hTdGF0ZSA9IHRoaXMuc2VhcmNoU3RhdGVzLlVudHJhY2tlZDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHZhbGlkYXRlU2VydmljZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuc2VydmljZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvY29tcGxldGVTZXJ2aWNlIG11c3QgYmUgaW1wbGVtZW50ZWRcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5pc1BhcmFtZXRlcml6ZWRTZWFyY2godGhpcy5zZXJ2aWNlKSAmJiAodGhpcy5zZWFyY2hQYXJhbWV0ZXJzID09PSB1bmRlZmluZWQgfHwgdGhpcy5zZWFyY2hQYXJhbWV0ZXJzID09PSBudWxsKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgcHJvdmlkZSBhZGRpdGlvbmFsU2VhcmNoUGFyYW1zIG9yIGp1c3QgcHJvdmlkZSBBdXRvY29tcGxldGVTb3VyY2VTZXJ2aWNlIGluc3RhZWFkIG9mIFBhcmFtZXRlcml6ZWRBdXRvY29tcGxldGVTb3VyY2VTZXJ2aWNlXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uQWN0aXZlSW5kZXhDaGFuZ2VkKGFjdGl2ZUluZGV4OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBsZXQgaGlnaGxpZ2h0ZWRJdGVtOiBBdXRvY29tcGxldGVJdGVtO1xyXG5cclxuICAgICAgICBpZiAoYWN0aXZlSW5kZXggPT09IERFRkFVTFRfQUNUSVZFX0lOREVYKSB7XHJcbiAgICAgICAgICAgIGhpZ2hsaWdodGVkSXRlbSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoVmFsdWUgPSB0aGlzLm9yaWdpbmFsU2VhcmNoVmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaGlnaGxpZ2h0ZWRJdGVtID0gdGhpcy5zZWFyY2hSZXN1bHRbYWN0aXZlSW5kZXhdO1xyXG4gICAgICAgICAgICB0aGlzLnNlYXJjaFZhbHVlID0gaGlnaGxpZ2h0ZWRJdGVtLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wcm9wYWdhdGVDaGFuZ2UodGhpcy5zZWFyY2hWYWx1ZSk7XHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRlZC5lbWl0KGhpZ2hsaWdodGVkSXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZXNldFNlYXJjaFRpbWVvdXQoKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhclNlYXJjaFRpbWVvdXQoKTtcclxuICAgICAgICB0aGlzLnNldFNlYXJjaFRpbWVvdXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldFNlYXJjaFRpbWVvdXQoKSB7XHJcbiAgICAgICAgdGhpcy50eXBpbmdUaW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLnNlYXJjaC5iaW5kKHRoaXMpLCB0aGlzLnBhdXNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNsZWFyU2VhcmNoVGltZW91dCgpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50eXBpbmdUaW1lb3V0KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNlYXJjaCgpIHtcclxuICAgICAgICB0aGlzLml0ZW1MaXN0U2VydmljZS5yZXN0b3JlSW50aWFsQWN0aXZlSW5kZXgoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudmFsaWRzZWFyY2hUZXJtKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5wZXJmb3JtU2VhcmNoKCkuZmlyc3QoKS5zdWJzY3JpYmUoXHJcbiAgICAgICAgICAgICAgICAocmVzdWx0czogQXV0b2NvbXBsZXRlSXRlbVtdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VhcmNoU3RhdGUgIT09IHRoaXMuc2VhcmNoU3RhdGVzLlVudHJhY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZVNlcnZpY2UuaXNPcGVuID0gcmVzdWx0cy5sZW5ndGggPiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1MaXN0U2VydmljZS5pdGVtcyA9IHJlc3VsdHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoUmVzdWx0ID0gcmVzdWx0cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hTdGF0ZSA9IHRoaXMuc2VhcmNoU3RhdGVzLkZpbmlzaGVkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwZXJmb3JtU2VhcmNoKCk6IE9ic2VydmFibGU8QXV0b2NvbXBsZXRlSXRlbVtdPiB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNQYXJhbWV0ZXJpemVkU2VhcmNoKHRoaXMuc2VydmljZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuICg8UGFyYW1ldGVyaXplZEF1dG9jb21wbGV0ZVNvdXJjZVNlcnZpY2U+dGhpcy5zZXJ2aWNlKS5nZXRXaXRoUGFyYW1zKHRoaXMuc2VhcmNoVmFsdWUsIHRoaXMuc2VhcmNoUGFyYW1ldGVycyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICg8QXV0b2NvbXBsZXRlU291cmNlU2VydmljZT50aGlzLnNlcnZpY2UpLmdldCh0aGlzLnNlYXJjaFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB2YWxpZHNlYXJjaFRlcm0oKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnNlYXJjaFZhbHVlIHx8ICcnKS5sZW5ndGggPj0gdGhpcy5taW5DaGFycztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGlzUGFyYW1ldGVyaXplZFNlYXJjaChzZXJ2aWNlOiBBdXRvY29tcGxldGVTb3VyY2VTZXJ2aWNlIHwgUGFyYW1ldGVyaXplZEF1dG9jb21wbGV0ZVNvdXJjZVNlcnZpY2UpOiBzZXJ2aWNlIGlzIFBhcmFtZXRlcml6ZWRBdXRvY29tcGxldGVTb3VyY2VTZXJ2aWNlIHtcclxuICAgICAgICByZXR1cm4gKDxQYXJhbWV0ZXJpemVkQXV0b2NvbXBsZXRlU291cmNlU2VydmljZT5zZXJ2aWNlKS5nZXRXaXRoUGFyYW1zICE9PSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXREZWZhdWx0SWZOdWxsT3JVbmRlZmluZWQ8VD4odmFsdWU6IFQsIGRlZmF1bHRWYWx1ZTogVCk6IFQge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsXHJcbiAgICAgICAgICAgID8gZGVmYXVsdFZhbHVlXHJcbiAgICAgICAgICAgIDogdmFsdWU7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQge1xyXG4gICAgSW5wdXQsXHJcbiAgICBEaXJlY3RpdmUsXHJcbiAgICBIb3N0TGlzdGVuZXJcclxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5cclxuaW1wb3J0IHsgSXRlbUxpc3RTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2l0ZW0tbGlzdC5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IEF1dG9jb21wbGV0ZVNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZXMvYXV0b2NvbXBsZXRlLnNlcnZpY2VcIjtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbcmVtb3RlLWF1dG9jb21wbGV0ZS1vcHRpb25dJyxcclxuICAgIGhvc3Q6IHtcclxuICAgICAgICAnKG1vdXNlZW50ZXIpJzogJ29uTW91c2VFbnRlcigkZXZlbnQpJyxcclxuICAgICAgICAnKG1vdXNlbGVhdmUpJzogJ29uTW91c2VMZWF2ZSgkZXZlbnQpJyxcclxuICAgICAgICAnKGNsaWNrKSc6ICdvbkNsaWNrKCRldmVudCknXHJcbiAgICB9XHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBPcHRpb25EaXJlY3RpdmUge1xyXG4gICAgQElucHV0KCdpdGVtSW5kZXgnKSBpbmRleDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGF1dG9jb21wbGV0ZVNlcnZpY2U6IEF1dG9jb21wbGV0ZVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBpdGVtTGlzdFNlcnZpY2U6IEl0ZW1MaXN0U2VydmljZSkge1xyXG4gICAgfVxyXG5cclxuICAgIG9uTW91c2VFbnRlcihldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIHRoaXMuaXRlbUxpc3RTZXJ2aWNlLmFjdGl2ZUluZGV4ID0gdGhpcy5pbmRleDtcclxuICAgIH1cclxuXHJcbiAgICBvbk1vdXNlTGVhdmUoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICB0aGlzLml0ZW1MaXN0U2VydmljZS5yZXN0b3JlSW50aWFsQWN0aXZlSW5kZXgoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5hdXRvY29tcGxldGVTZXJ2aWNlLnNlbGVjdEl0ZW1TdWJqZWN0Lm5leHQodGhpcy5pbmRleCk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZW51bSBLZXlDb2RlIHtcclxuICAgIEJhY2tzcGFjZSA9IDgsXHJcbiAgICBUYWIgPSA5LFxyXG4gICAgRW50ZXIgPSAxMyxcclxuICAgIFNoaWZ0ID0gMTYsXHJcbiAgICBDdHJsID0gMTcsXHJcbiAgICBBbHQgPSAxOCxcclxuICAgIFBhdXNlQnJlYWsgPSAxOSxcclxuICAgIENhcHNMb2NrID0gMjAsXHJcbiAgICBFc2NhcGUgPSAyNyxcclxuICAgIFNwYWNlID0gMzIsXHJcbiAgICBQYWdlVXAgPSAzMyxcclxuICAgIFBhZ2VEb3duID0gMzQsXHJcbiAgICBFbmQgPSAzNSxcclxuICAgIEhvbWUgPSAzNixcclxuICAgIExlZnRBcnJvdyA9IDM3LFxyXG4gICAgVXBBcnJvdyA9IDM4LFxyXG4gICAgUmlnaHRBcnJvdyA9IDM5LFxyXG4gICAgRG93bkFycm93ID0gNDAsXHJcbiAgICBJbnNlcnQgPSA0NSxcclxuICAgIERlbGV0ZSA9IDQ2LFxyXG4gICAgWmVybyA9IDQ4LFxyXG4gICAgQ2xvc2VkUGFyZW4gPSA0OCxcclxuICAgIE9uZSA9IDQ5LFxyXG4gICAgRXhjbGFtYXRpb25NYXJrID0gNDksXHJcbiAgICBUd28gPSA1MCxcclxuICAgIEF0U2lnbiA9IDUwLFxyXG4gICAgVGhyZWUgPSA1MSxcclxuICAgIFBvdW5kU2lnbiA9IDUxLFxyXG4gICAgSGFzaCA9IDUxLFxyXG4gICAgRm91ciA9IDUyLFxyXG4gICAgRG9sbGFyU2lnbiA9IDUyLFxyXG4gICAgRml2ZSA9IDUzLFxyXG4gICAgUGVyY2VudFNpZ24gPSA1MyxcclxuICAgIFNpeCA9IDU0LFxyXG4gICAgQ2FyZXQgPSA1NCxcclxuICAgIEhhdCA9IDU0LFxyXG4gICAgU2V2ZW4gPSA1NSxcclxuICAgIEFtcGVyc2FuZCA9IDU1LFxyXG4gICAgRWlnaHQgPSA1NixcclxuICAgIFN0YXIgPSA1NixcclxuICAgIEFzdGVyaWsgPSA1NixcclxuICAgIE5pbmUgPSA1NyxcclxuICAgIE9wZW5QYXJlbiA9IDU3LFxyXG4gICAgQSA9IDY1LFxyXG4gICAgQiA9IDY2LFxyXG4gICAgQyA9IDY3LFxyXG4gICAgRCA9IDY4LFxyXG4gICAgRSA9IDY5LFxyXG4gICAgRiA9IDcwLFxyXG4gICAgRyA9IDcxLFxyXG4gICAgSCA9IDcyLFxyXG4gICAgSSA9IDczLFxyXG4gICAgSiA9IDc0LFxyXG4gICAgSyA9IDc1LFxyXG4gICAgTCA9IDc2LFxyXG4gICAgTSA9IDc3LFxyXG4gICAgTiA9IDc4LFxyXG4gICAgTyA9IDc5LFxyXG4gICAgUCA9IDgwLFxyXG4gICAgUSA9IDgxLFxyXG4gICAgUiA9IDgyLFxyXG4gICAgUyA9IDgzLFxyXG4gICAgVCA9IDg0LFxyXG4gICAgVSA9IDg1LFxyXG4gICAgViA9IDg2LFxyXG4gICAgVyA9IDg3LFxyXG4gICAgWCA9IDg4LFxyXG4gICAgWSA9IDg5LFxyXG4gICAgWiA9IDkwLFxyXG4gICAgTGVmdFdpbmRvd0tleSA9IDkxLFxyXG4gICAgUmlnaHRXaW5kb3dLZXkgPSA5MixcclxuICAgIFNlbGVjdEtleSA9IDkzLFxyXG4gICAgTnVtcGFkMCA9IDk2LFxyXG4gICAgTnVtcGFkMSA9IDk3LFxyXG4gICAgTnVtcGFkMiA9IDk4LFxyXG4gICAgTnVtcGFkMyA9IDk5LFxyXG4gICAgTnVtcGFkNCA9IDEwMCxcclxuICAgIE51bXBhZDUgPSAxMDEsXHJcbiAgICBOdW1wYWQ2ID0gMTAyLFxyXG4gICAgTnVtcGFkNyA9IDEwMyxcclxuICAgIE51bXBhZDggPSAxMDQsXHJcbiAgICBOdW1wYWQ5ID0gMTA1LFxyXG4gICAgTXVsdGlwbHkgPSAxMDYsXHJcbiAgICBBZGQgPSAxMDcsXHJcbiAgICBTdWJ0cmFjdCA9IDEwOSxcclxuICAgIERlY2ltYWxQb2ludCA9IDExMCxcclxuICAgIERpdmlkZSA9IDExMSxcclxuICAgIEYxID0gMTEyLFxyXG4gICAgRjIgPSAxMTMsXHJcbiAgICBGMyA9IDExNCxcclxuICAgIEY0ID0gMTE1LFxyXG4gICAgRjUgPSAxMTYsXHJcbiAgICBGNiA9IDExNyxcclxuICAgIEY3ID0gMTE4LFxyXG4gICAgRjggPSAxMTksXHJcbiAgICBGOSA9IDEyMCxcclxuICAgIEYxMCA9IDEyMSxcclxuICAgIEYxMSA9IDEyMixcclxuICAgIEYxMiA9IDEyMyxcclxuICAgIE51bUxvY2sgPSAxNDQsXHJcbiAgICBTY3JvbGxMb2NrID0gMTQ1LFxyXG4gICAgU2VtaUNvbG9uID0gMTg2LFxyXG4gICAgRXF1YWxzID0gMTg3LFxyXG4gICAgQ29tbWEgPSAxODgsXHJcbiAgICBEYXNoID0gMTg5LFxyXG4gICAgUGVyaW9kID0gMTkwLFxyXG4gICAgVW5kZXJTY29yZSA9IDE4OSxcclxuICAgIFBsdXNTaWduID0gMTg3LFxyXG4gICAgRm9yd2FyZFNsYXNoID0gMTkxLFxyXG4gICAgVGlsZGUgPSAxOTIsXHJcbiAgICBHcmF2ZUFjY2VudCA9IDE5MixcclxuICAgIE9wZW5CcmFja2V0ID0gMjE5LFxyXG4gICAgQ2xvc2VkQnJhY2tldCA9IDIyMSxcclxuICAgIFF1b3RlID0gMjIyLFxyXG59IiwiaW1wb3J0IHsgRWxlbWVudFJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFNFQVJDSF9XUkFQUEVSX0NMQVNTLCBPUFRJT05fQ0xBU1MsIERFRkFVTFRfQUNUSVZFX0lOREVYIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9hdXRvY29tcGxldGUuY29uc3RhbnRzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU2Nyb2xsU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVLZXlib2FyT3B0aW9uTmF2aWdhdGlvbihhY3RpdmVJbmRleDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgYXV0b2NvbXBsZXRlRWxlbWVudCA9IDxIVE1MRWxlbWVudD50aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcclxuICAgICAgICBjb25zdCBsaXN0RWxlbWVudCA9IGF1dG9jb21wbGV0ZUVsZW1lbnQucXVlcnlTZWxlY3RvcihgLiR7U0VBUkNIX1dSQVBQRVJfQ0xBU1N9YCk7XHJcblxyXG4gICAgICAgIGlmIChsaXN0RWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAoYWN0aXZlSW5kZXggPT09IERFRkFVTFRfQUNUSVZFX0lOREVYKSB7XHJcbiAgICAgICAgICAgICAgICBsaXN0RWxlbWVudC5zY3JvbGxUbygwLCAwKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgb3B0aW9uRWxlbWVudHMgPSBsaXN0RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKGAuJHtPUFRJT05fQ0xBU1N9YCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSBvcHRpb25FbGVtZW50c1thY3RpdmVJbmRleF07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBsaXN0VG9wID0gbGlzdEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xyXG4gICAgICAgICAgICBjb25zdCBsaXN0Qm90dG9tID0gbGlzdFRvcCArIGxpc3RFbGVtZW50LmNsaWVudEhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRUb3AgPSBhY3RpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudEJvdHRvbSA9IGVsZW1lbnRUb3AgKyBhY3RpdmVFbGVtZW50LmNsaWVudEhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIGlmIChsaXN0VG9wID4gZWxlbWVudFRvcCkge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlRWxlbWVudC5zY3JvbGxJbnRvVmlldyh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGxpc3RCb3R0b20gPCBlbGVtZW50Qm90dG9tKSB7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVFbGVtZW50LnNjcm9sbEludG9WaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7XHJcbiAgICBEaXJlY3RpdmUsXHJcbiAgICBIb3N0TGlzdGVuZXIsXHJcbiAgICBFbGVtZW50UmVmLFxyXG4gICAgSW5wdXRcclxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5cclxuaW1wb3J0IHsgS2V5Q29kZSB9IGZyb20gXCIuLi9lbnVtcy9rZXkta29kZVwiO1xyXG5pbXBvcnQgeyBJdGVtTGlzdFNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZXMvaXRlbS1saXN0LnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgQXV0b2NvbXBsZXRlU2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9hdXRvY29tcGxldGUuc2VydmljZVwiO1xyXG5pbXBvcnQgeyBTY3JvbGxTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL3Njcm9sbC1zZXJ2aWNlXCI7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2tleWJvYXJkLW5hdmlnYXRpb25dJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgS2V5Ym9hcmROYXZpZ2F0aW9uRGlyZWN0aXZlIHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2Nyb2xsU2VydmljZTogU2Nyb2xsU2VydmljZTtcclxuXHJcbiAgICBASW5wdXQoKSBzdG9wRW50ZXJQcm9wYWdhdGlvbjogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXV0b2NvbXBsZXRlU2VydmljZTogQXV0b2NvbXBsZXRlU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGl0ZW1MaXN0U2VydmljZTogSXRlbUxpc3RTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZikge1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsU2VydmljZSA9IG5ldyBTY3JvbGxTZXJ2aWNlKGVsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKSBvbktleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICBsZXQga2V5ID0gZXZlbnQud2hpY2ggfHwgZXZlbnQua2V5Q29kZTtcclxuXHJcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcclxuICAgICAgICAgICAgY2FzZSBLZXlDb2RlLkRvd25BcnJvdzpcclxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRG93bktleShldmVudCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBLZXlDb2RlLlVwQXJyb3c6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVVwS2V5KGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEtleUNvZGUuRW50ZXI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUVudGVyKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGhhbmRsZURvd25LZXkoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICB0aGlzLml0ZW1MaXN0U2VydmljZS5hY3RpdmVJbmRleCsrO1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsU2VydmljZS5oYW5kbGVLZXlib2FyT3B0aW9uTmF2aWdhdGlvbih0aGlzLml0ZW1MaXN0U2VydmljZS5hY3RpdmVJbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBoYW5kbGVVcEtleShldmVudDogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgICAgIHRoaXMuaXRlbUxpc3RTZXJ2aWNlLmFjdGl2ZUluZGV4LS07XHJcbiAgICAgICAgdGhpcy5zY3JvbGxTZXJ2aWNlLmhhbmRsZUtleWJvYXJPcHRpb25OYXZpZ2F0aW9uKHRoaXMuaXRlbUxpc3RTZXJ2aWNlLmFjdGl2ZUluZGV4KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGhhbmRsZUVudGVyKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXRlbUxpc3RTZXJ2aWNlLmFjdGl2ZUluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgdGhpcy5hdXRvY29tcGxldGVTZXJ2aWNlLnNlbGVjdEl0ZW1TdWJqZWN0Lm5leHQodGhpcy5pdGVtTGlzdFNlcnZpY2UuYWN0aXZlSW5kZXgpO1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RvcEVudGVyUHJvcGFnYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuXHJcbmltcG9ydCB7IFJlbW90ZUF1dG9jb21wbGV0ZUNvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudHMvYXV0b2NvbXBsZXRlLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQgeyBPcHRpb25UZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gXCIuL2RpcmVjdGl2ZXMvb3B0aW9uLXRlbXBsYXRlLmRpcmVjdGl2ZVwiO1xyXG5pbXBvcnQgeyBPcHRpb25EaXJlY3RpdmUgfSBmcm9tIFwiLi9kaXJlY3RpdmVzL29wdGlvbi1kaXJlY3RpdmVcIjtcclxuaW1wb3J0IHsgSXRlbUxpc3RTZXJ2aWNlIH0gZnJvbSBcIi4vc2VydmljZXMvaXRlbS1saXN0LnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgS2V5Ym9hcmROYXZpZ2F0aW9uRGlyZWN0aXZlIH0gZnJvbSBcIi4vZGlyZWN0aXZlcy9rZXlib2FyZC1uYXZpZ2F0aW9uLmRpcmVjdGl2ZVwiO1xyXG5pbXBvcnQgeyBBdXRvY29tcGxldGVTZXJ2aWNlIH0gZnJvbSBcIi4vc2VydmljZXMvYXV0b2NvbXBsZXRlLnNlcnZpY2VcIjtcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgICBpbXBvcnRzOiBbXHJcbiAgICAgICAgQ29tbW9uTW9kdWxlLFxyXG4gICAgICAgIEZvcm1zTW9kdWxlXHJcbiAgICBdLFxyXG4gICAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICAgICAgUmVtb3RlQXV0b2NvbXBsZXRlQ29tcG9uZW50LFxyXG4gICAgICAgIE9wdGlvblRlbXBsYXRlRGlyZWN0aXZlLFxyXG4gICAgICAgIE9wdGlvbkRpcmVjdGl2ZSxcclxuICAgICAgICBLZXlib2FyZE5hdmlnYXRpb25EaXJlY3RpdmVcclxuICAgIF0sXHJcbiAgICBleHBvcnRzOiBbXHJcbiAgICAgICAgUmVtb3RlQXV0b2NvbXBsZXRlQ29tcG9uZW50LFxyXG4gICAgICAgIE9wdGlvblRlbXBsYXRlRGlyZWN0aXZlXHJcbiAgICBdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUmVtb3RlQXV0b2NvbXBsZXRlTW9kdWxlIHtcclxufSJdLCJuYW1lcyI6WyJEaXJlY3RpdmUiLCJUZW1wbGF0ZVJlZiIsIlN1YmplY3QiLCJJbmplY3RhYmxlIiwiRXZlbnRFbWl0dGVyIiwiQ29tcG9uZW50IiwiTkdfVkFMVUVfQUNDRVNTT1IiLCJmb3J3YXJkUmVmIiwiSW5wdXQiLCJPdXRwdXQiLCJDb250ZW50Q2hpbGQiLCJWaWV3Q2hpbGQiLCJFbGVtZW50UmVmIiwiSG9zdExpc3RlbmVyIiwiTmdNb2R1bGUiLCJDb21tb25Nb2R1bGUiLCJGb3Jtc01vZHVsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxRQUFhLG9CQUFvQixHQUFXLENBQUMsQ0FBQzs7QUFDOUMsUUFBYSx5QkFBeUIsR0FBVyxDQUFDOztBQUNsRCxRQUFhLGlCQUFpQixHQUFXLFVBQVU7O0FBQ25ELFFBQWEsYUFBYSxHQUFXLEdBQUc7O0FBRXhDLFFBQWEsY0FBYyxHQUFXLGtCQUFrQjs7QUFDeEQsUUFBYSxjQUFjLEdBQVcsY0FBYzs7QUFFcEQsUUFBYSxvQkFBb0IsR0FBVyw2QkFBNkI7O0FBQ3pFLFFBQWEsa0JBQWtCLEdBQVcsMkJBQTJCOztBQUNyRSxRQUFhLHdCQUF3QixHQUFXLGlDQUFpQzs7QUFDakYsUUFBYSxZQUFZLEdBQVcscUJBQXFCOztBQUN6RCxRQUFhLHlCQUF5QixHQUFXLHFCQUFxQjs7QUFDdEUsUUFBYSxhQUFhLEdBQVcsc0JBQXNCOztBQUMzRCxRQUFhLHVCQUF1QixHQUFXLHdCQUF3Qjs7Ozs7Ozs7UUNibkUsWUFBUztRQUNULFVBQU87UUFDUCxXQUFROzs7Ozs7Ozs7O0FDSFo7UUFNSSxpQ0FBbUIsUUFBMEI7WUFBMUIsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7U0FDNUM7O29CQUxKQSxjQUFTLFNBQUM7d0JBQ1AsUUFBUSxFQUFFLG1DQUFtQztxQkFDaEQ7Ozs7d0JBSm1CQyxnQkFBVzs7O1FBUS9CLDhCQUFDO0tBQUE7Ozs7OztBQ1JEO1FBR0E7WUFFVyxnQ0FBMkIsR0FBb0IsSUFBSUMsZUFBTyxFQUFVLENBQUM7WUFDckUsc0JBQWlCLEdBQW9CLElBQUlBLGVBQU8sRUFBVSxDQUFDO1lBRTFELFlBQU8sR0FBWSxLQUFLLENBQUM7U0FTcEM7UUFQRyxzQkFBSSx1Q0FBTTs7O2dCQUlWO2dCQUNJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQzthQUN2Qjs7OztnQkFORCxVQUFXLEtBQWM7Z0JB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