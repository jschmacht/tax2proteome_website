{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/create-menubar/create-menubar.component.ts","webpack:///src/app/create-menubar/create-menubar.component.html","webpack:///src/app/create-options/create-options.component.html","webpack:///src/app/create-options/create-options.component.ts","webpack:///src/app/create/create.component.ts","webpack:///src/app/create/create.component.html","webpack:///src/app/example/example.component.ts","webpack:///src/app/example/example.component.html","webpack:///src/app/faq/faq.component.ts","webpack:///src/app/faq/faq.component.html","webpack:///src/app/file-input/file-input.component.ts","webpack:///src/app/file-input/file-input.component.html","webpack:///src/app/impress/impress.component.ts","webpack:///src/app/impress/impress.component.html","webpack:///src/app/list-input/list-input.component.ts","webpack:///src/app/list-input/list-input.component.html","webpack:///src/app/names.service.ts","webpack:///src/app/nav-bar/nav-bar.component.ts","webpack:///src/app/nav-bar/nav-bar.component.html","webpack:///src/app/power-input/power-input.component.ts","webpack:///src/app/power-input/power-input.component.html","webpack:///src/app/tax-table/tax-table.component.ts","webpack:///src/app/tax-table/tax-table.component.html","webpack:///src/app/title-bar/title-bar.component.ts","webpack:///src/app/title-bar/title-bar.component.html","webpack:///src/app/user-input.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","library","addIcons","declarations","providers","bootstrap","CreateMenubarComponent","taxTable","UserInputService","buttonClicked","iconClicked","active_bttn","highlight","style","background","color","document","getElementById","$event","taxon","name","replace","addTaxa","refreshTable","selectedTaxa","console","log","selectedDatabase","selectedRank","selectedHeader","selectedRedundant","taxIDs","forEach","item","taxid","sendGetRequest","CreateOptionsComponent","namesService","event","rankedTaxa","withParentID","isUserInput","rank","source","value","getIDs","taxiddata","taxonNew","parentid","receive_data","order","indexOf","push","last_taxon_with_specified_level","CreateComponent","ExampleComponent","FaqComponent","FileInputComponent","fileName","target","files","size","alert","length","input","reader","FileReader","readAsText","index","onload","text","result","text_list","split","map","Number","filter","Boolean","getNames","err","openFile","ImpressComponent","ListInputComponent","splitted","bindingInput","nativeElement","getTaxIDValue","NamesService","http","userInputService","baseUrl","Url2","taxids","params","set","toString","get","retry","error","message","fetchNames","toPromise","receivedData","receivedData2","entry","fetchParentIDs","NavBarComponent","PowerInputComponent","searchTaxonCtrl","isLoading","messageEvent","valueChanges","pipe","errorMsg","filteredTaxa","subscribe","data","selectedTaxon","setValue","emit","sendTaxEntry","TaxTableComponent","displayedColumns","dataSource","sort","paginator","deleteSelectedTaxIDs","click","TitleBarComponent","myControl","databases","ranks","redundant_options","header_options","taxObject","a","providedIn","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CreateComponent } from './create/create.component'\nimport {FaqComponent} from \"./faq/faq.component\";\nimport {ImpressComponent} from \"./impress/impress.component\";\nimport {ExampleComponent} from \"./example/example.component\";\n\n\nconst routes: Routes = [\n  /*{ path: 'create', component: CreateComponent },\n  { path: 'faq', component: FaqComponent },\n  { path: 'impress', component: ImpressComponent},\n  { path: 'example', component: ExampleComponent},\n  { path: '**', component: CreateComponent }*/\n];\n\n\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'tax2proteome';\n}\n","<div id=\"container\">\n  <div id=\"title-bar\">\n    <app-title-bar></app-title-bar>\n  </div>\n  <div id=\"content\">\n    <app-nav-bar></app-nav-bar>\n  </div>\n</div>","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\n\n//Angular Material Components\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n//import {MatCheckboxModule} from '@angular/material';\n//import {MatButtonModule} from '@angular/material';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatListModule} from '@angular/material/list';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatIconModule, MatIconRegistry} from '@angular/material/icon';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { HttpClientModule }    from '@angular/common/http';\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {NamesService} from \"./names.service\";\nimport {MatCheckboxModule} from \"@angular/material/checkbox\";\nimport { ImpressComponent } from './impress/impress.component';\nimport { TitleBarComponent } from './title-bar/title-bar.component';\nimport { NavBarComponent } from './nav-bar/nav-bar.component';\nimport { CreateComponent } from './create/create.component';\nimport { TaxTableComponent } from './tax-table/tax-table.component';\nimport { CreateMenubarComponent } from './create-menubar/create-menubar.component';\nimport { PowerInputComponent } from './power-input/power-input.component';\nimport { FileInputComponent } from './file-input/file-input.component';\nimport { ListInputComponent } from './list-input/list-input.component';\nimport { CreateOptionsComponent } from './create-options/create-options.component';\nimport { FaqComponent } from './faq/faq.component';\nimport { ExampleComponent } from './example/example.component';\nimport {UserInputService} from \"./user-input.service\";\nimport { FontAwesomeModule, FaIconLibrary } from '@fortawesome/angular-fontawesome';\nimport { faCoffee } from '@fortawesome/free-solid-svg-icons';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { faFileUpload } from '@fortawesome/free-solid-svg-icons';\nimport { faUpload} from '@fortawesome/free-solid-svg-icons';\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ImpressComponent,\n    TitleBarComponent,\n    NavBarComponent,\n    CreateComponent,\n    TaxTableComponent,\n    CreateMenubarComponent,\n    PowerInputComponent,\n    FileInputComponent,\n    ListInputComponent,\n    CreateOptionsComponent,\n    FaqComponent,\n    ExampleComponent\n  ],\n    imports: [\n        HttpClientModule,\n        BrowserModule,\n        AppRoutingModule,\n        BrowserAnimationsModule,\n        //MatCheckboxModule,\n        //MatButtonModule,\n        MatInputModule,\n        MatAutocompleteModule,\n        MatDatepickerModule,\n        MatFormFieldModule,\n        MatRadioModule,\n        MatSelectModule,\n        MatSliderModule,\n        MatSlideToggleModule,\n        MatMenuModule,\n        MatSidenavModule,\n        MatToolbarModule,\n        MatListModule,\n        MatGridListModule,\n        MatCardModule,\n        MatStepperModule,\n        MatTabsModule,\n        MatExpansionModule,\n        MatButtonToggleModule,\n        MatChipsModule,\n        MatIconModule,\n        MatProgressSpinnerModule,\n        MatProgressBarModule,\n        MatDialogModule,\n        MatTooltipModule,\n        MatSnackBarModule,\n        MatTableModule,\n        MatSortModule,\n        MatPaginatorModule,\n        FlexLayoutModule,\n        ReactiveFormsModule,\n        FormsModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        FontAwesomeModule\n    ],\n  providers: [\n      NamesService,\n      UserInputService,\n      TaxTableComponent\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n    constructor(library: FaIconLibrary) {\n        // Add an icon to the library for convenient access in other components\n        library.addIcons(faCoffee);\n        library.addIcons(faUpload);\n        library.addIcons(faFileUpload);\n    }\n}\n\n","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {UserInputService} from \"../user-input.service\";\nimport {TaxTableComponent} from \"../tax-table/tax-table.component\";\nimport {PowerInputComponent} from \"../power-input/power-input.component\";\nimport {TaxData} from \"../user-input.service\";\n\n@Component({\n  selector: 'app-create-menubar',\n  templateUrl: './create-menubar.component.html',\n  styleUrls: ['./create-menubar.component.css']\n})\n\n\nexport class CreateMenubarComponent implements OnInit {\n  active_bttn: string;\n  buttonClicked = null;\n  iconClicked = null;\n  taxon:TaxData;\n  @ViewChild(PowerInputComponent) powerInput;\n\n  constructor(\n      private taxTable: TaxTableComponent,\n      public UserInputService: UserInputService\n  ) { }\n\n  ngOnInit(): void {\n    this.active_bttn = \"power_input\";\n    this.highlight('0')\n  }\n  // button highlight\n  highlight(id){\n    if(this.buttonClicked != null)\n      {\n        this.buttonClicked.style.background = \"white\";\n        this.iconClicked.style.color = \"#9E9E9E\"\n      }\n    this.buttonClicked  = document.getElementById(id);\n    this.iconClicked = document.getElementById(id+'1')\n    this.buttonClicked.style.background =  \"#106cc8\";\n    this.iconClicked.style.color =  \"white\";\n    }\n\n// receive power-input event\n  receiveTaxEntry($event) {\n    this.taxon=$event\n    this.taxon.name = this.taxon.name.replace(/ *\\(taxid:[^)]*\\)*/g, \"\");\n    this.UserInputService.addTaxa(this.taxon)\n    this.taxTable.refreshTable(this.UserInputService.selectedTaxa);\n  }\n\n  // get all user input data from UserInputService and log to console, later send API\n  sendGetRequest(){\n    console.log('?db=',this.UserInputService.selectedDatabase);\n    console.log('?rank=',this.UserInputService.selectedRank);\n    if (this.UserInputService.selectedDatabase=='NCBI-nr' && this.UserInputService.selectedHeader=='reduced headers'){\n      console.log('?rh=true');\n    }\n    else{\n      console.log('?rh=false');\n    }\n    if (this.UserInputService.selectedDatabase!='NCBI-nr' && this.UserInputService.selectedRedundant=='non-redundant'){\n      console.log('?nr=true');\n    }\n    else{\n      console.log('?nr=false');\n    }\n    let taxIDs:string='?id=';\n    this.UserInputService.selectedTaxa.forEach((item) => {\n      taxIDs = taxIDs + item.taxid + ',';\n    });\n    console.log(taxIDs)\n  }\n\n\n\n}\n","<mat-button-toggle-group id=\"create-menu-bar\" name=\"fontStyle\" aria-label=\"Font Style\" [(value)]=\"active_bttn\">\n    <mat-button-toggle class=button_style id = \"0\" value=\"power_input\" (click)=\"highlight(0)\" matTooltip=\"provide taxon name or ID\" matTooltipPosition=\"above\">\n        <mat-icon id=\"01\">font_download</mat-icon>\n    </mat-button-toggle>\n    <mat-button-toggle class=button_style id = \"1\" value=\"list_input\" matTooltip=\"provide list of taxon IDs\" matTooltipPosition=\"above\" (click)=\"highlight(1)\">\n        <mat-icon id=\"11\">view_list</mat-icon>\n    </mat-button-toggle>\n    <mat-button-toggle class=button_style id = \"2\" value=\"file_input\" matTooltip=\"provide file containing taxon IDs\" matTooltipPosition=\"above\" (click)=\"highlight(2)\">\n        <mat-icon id=\"21\">note_add</mat-icon>\n    </mat-button-toggle>\n    <mat-button-toggle class=button_style id = \"3\" value=\"options\" matTooltip=\"customize your database\" matTooltipPosition=\"above\" (click)=\"highlight(3)\">\n        <mat-icon id=\"31\">build</mat-icon>\n    </mat-button-toggle>\n    <mat-button-toggle disabled>\n    </mat-button-toggle>\n    <mat-button-toggle value=\"underline\" matTooltip=\"submit and start database creation\" style=\"float: right;\" matTooltipPosition=\"above\" (click)=\"sendGetRequest()\">\n        <mat-icon>send</mat-icon>\n    </mat-button-toggle>\n</mat-button-toggle-group>\n<div class=\"input_area\">\n    <ng-container *ngIf=\"active_bttn==='power_input'\">\n        <app-power-input (messageEvent)=\"receiveTaxEntry($event)\"></app-power-input>\n    </ng-container>\n\n    <ng-container *ngIf=\"active_bttn==='list_input'\">\n        <app-list-input></app-list-input>\n    </ng-container>\n\n    <ng-container *ngIf=\"active_bttn==='file_input'\">\n        <app-file-input></app-file-input>\n    </ng-container>\n\n    <ng-container *ngIf=\"active_bttn==='options'\">\n        <app-create-options></app-create-options>\n    </ng-container>\n</div>\n<div class=\"tax_table\">\n    <app-tax-table></app-tax-table>\n</div>","<mat-grid-list cols=\"3\" rowHeight='100px'>\n    <mat-grid-tile>\n        <div>\n            <mat-form-field>\n                <mat-label>Source</mat-label>\n                <mat-select [(ngModel)]=\"this.UserInputService.selectedDatabase\">\n                    <mat-option value=\"option\"\n                                *ngFor=\"let database of this.UserInputService.databases\"\n                                [value]=\"database\">\n                        {{database}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n    </mat-grid-tile>\n    <mat-grid-tile>\n        <div>\n            <mat-form-field>\n                <mat-label>Rank</mat-label>\n                <mat-select\n                        [(ngModel)]=\"this.UserInputService.selectedRank\">\n                    <mat-option value=\"option\"\n                                *ngFor=\"let rank of this.UserInputService.ranks\"\n                                [value]=\"rank\"\n                                (onSelectionChange)=\"find_taxids($event)\" >\n                        {{rank}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n    </mat-grid-tile>\n    <mat-grid-tile>\n        <div>\n            <div *ngIf=\"this.UserInputService.selectedDatabase=='NCBI-nr'; then thenBlock else elseBlock\"></div>\n            <ng-template #thenBlock>\n                <mat-form-field>\n                    <mat-label>Type</mat-label>\n                    <mat-select [(ngModel)]=\"this.UserInputService.selectedHeader\">\n                        <mat-option value=\"option\"\n                                    *ngFor=\"let option of this.UserInputService.header_options\" [value]=\"option\">\n                            {{option}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </ng-template>\n            <ng-template #elseBlock>\n                <mat-form-field>\n                    <mat-label>Type</mat-label>\n                    <mat-select [(ngModel)]=\"this.UserInputService.selectedRedundant\">\n                        <mat-option value=\"option\"\n                                    *ngFor=\"let option of this.UserInputService.redundant_options\" [value]=\"option\">\n                            {{option}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </ng-template>\n        </div>\n    </mat-grid-tile>\n</mat-grid-list>","import { Component, OnInit } from '@angular/core';\nimport {UserInputService} from \"../user-input.service\";\nimport {NamesService} from \"../names.service\";\nimport {TaxTableComponent} from \"../tax-table/tax-table.component\";\nimport {TaxIDData} from \"../user-input.service\";\n\n@Component({\n  selector: 'app-create-options',\n  templateUrl: './create-options.component.html',\n  styleUrls: ['./create-options.component.css']\n})\nexport class CreateOptionsComponent implements OnInit {\n\n  constructor(\n      public UserInputService: UserInputService,\n      private taxTable: TaxTableComponent,\n      private namesService: NamesService\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  // if rank is changed, keep taxIDs but show taxIDs for selected rank\n async find_taxids(event) {\n     this.UserInputService.rankedTaxa = []\n     let withParentID: TaxIDData[] = []\n     let entry: TaxIDData;\n     if (event.isUserInput) {\n         let rank = event.source.value;\n         if (rank == 'species') {\n             this.taxTable.refreshTable(this.UserInputService.selectedTaxa)\n         }\n         else {\n             for (let taxon of this.UserInputService.selectedTaxa) {\n                 let taxiddata = await this.namesService.getIDs([taxon.taxid])\n                 let taxonNew = taxiddata[0]\n                 while (taxonNew.rank == 'no rank') {\n                     let receive_data = await this.namesService.getIDs([taxonNew.parentid])\n                     taxonNew = receive_data[0]\n                 }\n                 if (this.UserInputService.order.indexOf(taxonNew.rank) > this.UserInputService.order.indexOf(rank)) {\n                     this.UserInputService.rankedTaxa.push(taxiddata[0])\n                 } else if (this.UserInputService.order.indexOf(taxonNew.rank) == this.UserInputService.order.indexOf(rank)) {\n                     this.UserInputService.rankedTaxa.push(taxonNew)\n                 } else {\n                     let last_taxon_with_specified_level: TaxIDData\n                     while (this.UserInputService.order.indexOf(taxonNew.rank) < this.UserInputService.order.indexOf(rank)) {\n                         if (taxonNew.rank != 'no rank') {\n                             last_taxon_with_specified_level = taxonNew\n                         }\n                         let receive_data = await this.namesService.getIDs([taxonNew.parentid])\n                         taxonNew = receive_data[0]\n                     }\n                     if (this.UserInputService.order.indexOf(taxonNew.rank) == this.UserInputService.order.indexOf(rank)) {\n                         this.UserInputService.rankedTaxa.push(taxonNew)\n                     }\n                     if (this.UserInputService.order.indexOf(taxonNew.rank) > this.UserInputService.order.indexOf(rank)) {\n                         if (last_taxon_with_specified_level) {\n                             this.UserInputService.rankedTaxa.push(last_taxon_with_specified_level)\n                         } else {\n                             this.UserInputService.rankedTaxa.push(taxonNew)\n                         }\n                     }\n                 }\n             }\n             this.taxTable.refreshTable(this.UserInputService.rankedTaxa)\n         }\n     }\n }\n\n}\n","import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\n\n@Component({\n  selector: 'app-create',\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.css']\n})\nexport class CreateComponent implements OnInit {\n\n\n  constructor(\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","\n<div>\n    <app-create-menubar></app-create-menubar>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-example',\n  templateUrl: './example.component.html',\n  styleUrls: ['./example.component.css']\n})\nexport class ExampleComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h2> Example 1: Generate protein database using Uniprot database and unchanged rank</h2>\n<h3>Tax2proteome run for a metaproteome sample containing species highly represented in the protein databases</h3>\n<p>Sample composition: Escherichia coli (taxid: 562), Yerisina pseudotuberculosis (taxid:633),\n    unknown species of the Rhizobium (taxid: 379) and Salmonella (taxid: 590) genus, and some viruses of the\n    Coronaviridae (taxid: 11118) family are assumed. </p>\n<h3>1. Select taxa for database selection by taxon IDs or name by different methods: </h3>\n<p> The taxon IDs of species or of a certain rank can be determined here: <a href=\"https://www.ncbi.nlm.nih.gov/taxonomy\"> NCBI Taxonomy </a></p>\n<p><b>Input by name or taxon ID search: </b><br>\n    <img src=\"../assets/Screenshot_autocomplete.png\"  alt=\"pic_auto\" style=\"width:50%;height:20%;\">\n</p>\n<p><b>Input by taxon IDs. Separated by comma, space, semicolon or new line: </b><br>\n    <img src=\"../assets/Screenshot_taxidlist.png\"  alt=\"pic_list\" style=\"width:50%;height:20%;\">\n</p>\n<p><b>Input by upload file. All numbers contained in the file are extracted as taxon IDs: </b><br>\n    <img src=\"../assets/Screenshot_upload.png\"  alt=\"pic_upload\" style=\"width:50%;height:20%;\">\n</p>\n<h3>2. Select Options </h3>\n<h4>Option database selection</h4>\n<p>Chose one of the following databases: Uniprot, NCBI-nr, Swissprot. Tax2Proteome selects all sequences\n    according the given taxa from one of these databases. Since the sample contains E.coli and Salmonella, which\n    are high represented in the databases, the smaller Uniprot Database is chosen.<br>\n    <img src=\"../assets/Screenshot_db_options.png\"  alt=\"pic_db\" style=\"width:50%;height:20%;\">\n</p>\n<h4>Option rank selection</h4>\n<p>Chose rank, the higher, the more protein sequences are contained in the resulting database. Here option species is chosen,\n    so that the defined rank by user given taxon IDs remains unchanged. For high represented species like Salmonella and E.coli\n    a rank increase is unnecessary and decreases the identification rate.<br>\n    <img src=\"../assets/Screenshot_rank_options.png\"  alt=\"pic_rank\" style=\"width:50%;height:20%;\">\n</p>\n<h4>Option for databases selected from the Uniprot or Swissprot protein databases</h4>\n<p>Option non-redundant merges all redundant sequences to one with concatenated fasta headers.\n    The search engine matching results are improved by using non-redundant databases, so use it!<br>\n    <img src=\"../assets/Screenshot_redundant_options.png\"  alt=\"pic_redundant\" style=\"width:50%;height:20%;\">\n</p>\n<h3>3. Control input taxa </h3>\n<p>Control the selected taxa and ranks in the input table. If taxa with higher rank as specified in options are\n    given by the user, they stay unchanged.<br>\n    <img src=\"../assets/Screenshot_table.png\"  alt=\"pic_table\" style=\"width:50%;height:20%;\">\n</p>\n<h3>4. Send your request for generating a protein sequence database based on public sequence databases accordingly to\n    your chosen taxa and options. </h3>\n<p>\n    push the  <mat-icon class=\"icon\">send</mat-icon>   button\n</p>\n<h3>5. Download your specified database by link.</h3>\n<p>Depending on server workload, the database creation can take up to one day, but mostly it will take only few minutes.\n    For database download follow the link provided by the browser after sending the request.\n    <img src=\"../assets/Screenshot_download_link.png\"  alt=\"pic_link\" style=\"width:50%;height:20%;\">\n</p>\n\n\n<h2> Example 2: Generate protein database using NCBI-nr database and genus rank</h2>\n<h3>Tax2Proteome run for species with low database representation.  </h3>\n<p>Sample composition: Cupriavidus metallidurans (taxid: 119219), Rhodotorula glutinis (taxid: 5535)</p>\n<h3>1. Select taxa for database selection by taxon IDs or name by one (or more) of the different possibilities: </h3>\n<p>For taxa input use one of the following input options: <mat-icon class=\"icon2\">font_download</mat-icon>  or  <mat-icon class=\"icon2\">view_list</mat-icon>  or  <mat-icon class=\"icon2\">note_add</mat-icon>\n</p>\n<p>Example input by taxon IDs separated by comma, space, semicolon, or new line: <br>\n    <img src=\"../assets/Screenshot_taxidlist2.png\"  alt=\"pic_list2\" style=\"width:50%;height:20%;\">\n</p>\n<h3>2. Select Options </h3>\n<h4>Option database selection</h4>\n<p>Chose one of the following databases: Uniprot, NCBI-nr, Swissprot. Tax2Proteome selects all sequences\n    according the given taxa from one of these databases. Since the sample contains only rare species, which\n    are low represented in the databases, the bigger NCBI Database is chosen.<br>\n    <img src=\"../assets/Screenshot_db_options2.png\"  alt=\"pic_db2\" style=\"width:50%;height:20%;\">\n</p>\n<h4>Option rank selection</h4>\n<p>Chose rank, the higher, the more protein sequences contained in the resulting database.Here option genus is chosen.\n    Since the requested species are only poorly investigated, they have only few entries in the public protein databases.\n    The identification can profit from including sequences of related species.<br>\n    <img src=\"../assets/Screenshot_rank_options2.png\"  alt=\"pic_rank2\" style=\"width:50%;height:20%;\">\n</p>\n<h4>Options for databases selected from the NCBI-nr protein database</h4>\n<p>Option 'reduced headers' reduces the NCBI fasta-headers to their accession IDs. This reduces the memory requirement up to 50 %.<br>\n    <img src=\"../assets/Screenshot_header_options2.png\"  alt=\"pic_header\" style=\"width:50%;height:20%;\">\n</p>\n<h3>3. Control input taxa </h3>\n<p>Control the selected taxa and ranks in the input table.<br>\n    <img src=\"../assets/Screenshot_table2.png\"  alt=\"pic_table2\" style=\"width:50%;height:20%;\">\n</p>\n<h3>4. Send your request for generating a protein sequence database based on public sequence databases accordingly to\n    your chosen taxa and options. </h3>\n<p>\n    push the  <mat-icon class=\"icon\">send</mat-icon>   button\n</p>\n<h3>5. Download your specified database by link.</h3>\n<p>Depending on server workload, the database creation can take up to one day, but mostly it will take only few minutes.\n    For database download follow the link provided by the browser after sending the request.\n    <img src=\"../assets/Screenshot_download_link.png\"  alt=\"pic_link\" style=\"width:50%;height:20%;\">\n</p>\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-faq',\n  templateUrl: './faq.component.html',\n  styleUrls: ['./faq.component.css']\n})\nexport class FaqComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","\n<h1>FAQ</h1>\n<h2>How should I assemble my database?</h2>\n<p>You should know your sample composition or make a good estimate. With known taxon IDs you can use tax2proteome to select\n    all protein sequences from the public protein databases from NCBI or UNiProtKB. Taxon IDs can be determined using the NCBI Taxonomy website\n    <a href=\"https://www.ncbi.nlm.nih.gov/taxonomy\"> (https://www.ncbi.nlm.nih.gov/taxonomy)</a> or using the search field.<br>\nFor including the determined taxa use one of the following options or a combination of them:<br>\n    <mat-icon class=\"icon\">font_download</mat-icon>  Text search with name or taxon ID.<br>\n    <mat-icon class=\"icon\">view_list</mat-icon> Enter multiple taxon IDs seperated by space, comma or line break.<br>\n    <mat-icon class=\"icon\">note_add</mat-icon> File Upload (extracts all contained numbers). Only .csv, .tsv and .txt files allowed. <br><br>\nDepending on your analyzed sample, you can choose one of the public protein databases and a taxonomic rank.\nSee also FAQ\n   <a href=\"#A1\">Which database should I use?</a>\nand\n    <a href=\"#A2\">Which taxonomic rank should I use?</a> .\n</p>\n\n<h2 id=\"A1\">Which database should I use?</h2>\n<p>The most important public protein databases are the UniProt Knowledgebase (UniProtKB) database\n    (https://www.uniprot.org/uniprot/) (2019) and the National Center for Biotechnology Information (NCBI)\n    non-redundant database (https://www.ncbi.nlm.nih.gov/protein).\n\n<p>  <b>NCBI-nr</b> <br>\n    The NCBI non-redundant database is a collection of sequences from several sources including UniProtKB. It is the biggest public protein database with approximately\n    220 million entries (database state 09.09.2019).\n</p>\n<p>   <b>UniProt</b><br>\n    The UniProtKB database is composed of the Swiss-Prot and TrEMBL databases and contains about 172 million sequence\n    entries (database state 09.09.2019). The combination of both is called Uniprot by this tool. The protein\n    sequences originate from translations of coding sequences (CDS) submitted to the EMBL-Bank/GenBank/DDBJ nucleotide sequence resources.</p>\n<p>   <b>SwissProt</b><br>\n    Swiss-Prot is the manually curated section of UniProtKB with minimal redundancy and contains about half a million\n    fasta entries (database state 09.09.2019). It is recommended as resource for microbial sequences only for model organisms.\n</p>\n<p>   <b>Recommandation</b><br>\n    Important for your database choice is the size of the expected database. If your sample contains many\n    different organism and/or model organisms with huge database representation, we recommend to use the\n    UniProt database. In our example samples, the UniProt selected databases contained up to 40 % less sequences,\n    which improves the identification rates. If the databases size becomes too large, the identification rate will decrease.\n    For rare species the NCBI-nr database may contain more relevant sequences.\n    </p>\n\n<h2 id=\"A2\">Which taxonomic rank should I use?</h2>\n<p>Only a small proportion of organisms is fully sequenced so far. Currently only for model organisms or medically\n    interesting species public protein sequence databases can be considered reasonably representative. If your organisms\n    belong to one of these, you should use the rank ‘species’. If the analyzed species are poorly represented in the\n    public protein databases, increasing the rank (e.g. to 'genus' or 'family') may increase the sequence coverage by\n    including sequences of related species. However, this should be carefully considered, since an increase in the\n    database size is often accompanied by a decrease in the identification rate.\n    The entire bacterial superkingdom database (taxon ID = 2) from Uniprot or NCBI-nr is too large for the most\n    search engines and should never be used. The more specific the database is and the better the sequence coverage,\n    the better are the spectral matching results.</p>\n\n<h2 id=\"A3\">What is the difference between 'reduced headers' and 'full headers' options?</h2>\n<p>This option is only available for  NCBI-nr selected databases to reduce the database size. If the ‘reduced headers’ option is\nchosen, the often enormous headers of NCBI non-redundant database, which contain all redundant sequence headers\nconcatenated, are reduced to their accession IDs. This reduces the memory requirements for the generated database by up to 50 % or more.<br>\n    Separator of different accession IDs: SOH (\\x01) <br>\n    An assignment of the accession IDs to their corresponding taxa is possible using the prot.accession2taxid and pdb.accession2taxid files from NCBI.<br>\n    <a href=\"ftp.ncbi.nlm.nih.gov/pub/taxonomy/accession2taxid/prot.accession2taxid.gz\">ftp.ncbi.nlm.nih.gov/pub/taxonomy/accession2taxid/prot.accession2taxid.gz</a> <br>\n    <a href=\"ftp.ncbi.nlm.nih.gov/pub/taxonomy/accession2taxid/pdb.accession2taxid.gz\">ftp.ncbi.nlm.nih.gov/pub/taxonomy/accession2taxid/pdb.accession2taxid.gz</a> <br>\n\n</p>\n<p><b>Example:</b><br>\n<u>original NCBI-nr fasta entry:</u><br>\n>WP_02.1 50S ribosomal protein L14 #NP_4.1 30S ribosomal protein S18 [halophilic eubacterium NRCC 41227]#NP_5.2\nRecName: Full=30S ribosomal protein [Salmonella enterica subsp. diarizonae serovar 38:[k]:-]#NP_6.2\nRecName: Full=30S ribosomal protein[Methylophilus]<br>\nMAYRKLGRTSSQRKAMLRDLTTDLLINESIVTTEARAKEIRKTVEKMITLGKRGDLHARR<br>\nQAAAYVRNEIASENYDEATDKYTSTTALQKLFSEIAPRYAERNGGYTRILKTEPRRGDAA<br>\nPMAIIELV<br>\n<u>NCBI-nr fasta entry with reduced headers:</u><br>\n>WP_02.1#NP_4.1#NP_5.2#NP_6.2<br>\nMAYRKLGRTSSQRKAMLRDLTTDLLINESIVTTEARAKEIRKTVEKMITLGKRGDLHARR<br>\nQAAAYVRNEIASENYDEATDKYTSTTALQKLFSEIAPRYAERNGGYTRILKTEPRRGDAA<br>\nPMAIIELV\n\n<h2 id=\"A4\">Should I use the non-redundant option?</h2>\n<p>This option is only available for Uniprot or Swissprot selected databases. The non-redundant option merges UniprotKB\n    database fasta entries with same sequence into one entry with concatenated headers. Header seperator SOH (\\x01) <br>\n    You should use it!<br>\n    <b>Example</b> <br>\n    <u>Redundant UniProtKB protein sequence entries: </u><br>\n    >tr|L0AQC3|L0AQC3_9EURY Coenzyme-B sulfoethylthiotransferase (Fragment) OS=uncultured Methanomicrobiales archaeon OX=183760 GN=mcrA PE=3 SV=1<br>\n    AAVADLAFAAKHAGVIQMGDILPARRARGPNEPGGIKFGHFADMIQADRKYPNDPARATL<br>\n    EVVGAGAMLFDQIWLGSYMSGGVGFTQYATAAYTDNILDDYTYYGMDYIKSKYKVNWQSP<br>\n    SEKDKVKATQDVVNDIATEVNLYGMEQYEQYPTALEDHFG<br>\n    >tr|XXX|YYY Coenzyme (Fragment) OS=uncultured archaeon FIN637 OX=79780 GN=mcrA PE=3 SV=1<br>\n    AAVADLAFAAKHAGVIQMGDILPARRARGPNEPGGIKFGHFADMIQADRKYPNDPARATL<br>\n    EVVGAGAMLFDQIWLGSYMSGGVGFTQYATAAYTDNILDDYTYYGMDYIKSKYKVNWQSP<br>\n    SEKDKVKATQDVVNDIATEVNLYGMEQYEQYPTALEDHFG<br>\n    <u>redundant sequences merged to one sequence with concatenated headers</u>:<br>\n    tr|L0AQC3|L0AQC3_9EURY Coenzyme-B sulfoethylthiotransferase (Fragment) OS=uncultured Methanomicrobiales archaeon\n    OX=183760 GN=mcrA PE=3 SV=1 # tr|XXX|YYY Coenzyme (Fragment) OS=uncultured archaeon FIN637 OX=79780 GN=mcrA PE=3 SV=1<br>\n    AAVADLAFAAKHAGVIQMGDILPARRARGPNEPGGIKFGHFADMIQADRKYPNDPARATL<br>\n    EVVGAGAMLFDQIWLGSYMSGGVGFTQYATAAYTDNILDDYTYYGMDYIKSKYKVNWQSP<br>\n    SEKDKVKATQDVVNDIATEVNLYGMEQYEQYPTALEDHFG<br>\n</p>\n\n<h2 id=\"A5\">How do I get my specified database?</h2>\n<p> use download link. </p>\n","import { Component, OnInit } from '@angular/core';\nimport{TaxTableComponent} from \"../tax-table/tax-table.component\";\nimport {UserInputService} from \"../user-input.service\";\nimport {NamesService} from \"../names.service\";\n\n@Component({\n  selector: 'app-file-input',\n  templateUrl: './file-input.component.html',\n  styleUrls: ['./file-input.component.css']\n})\nexport class FileInputComponent implements OnInit {\n\n  fileName: string = \"No file selected\";\n\n  constructor(\n      private taxTable: TaxTableComponent,\n      private namesService: NamesService,\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  //upload function\n  openFile(event) {\n    if(event.target.files[0].size > 307200){\n      alert(\"File is too big!\");\n      return;\n    }\n    if(event.target.files.length > 0)\n    {\n      this.fileName = event.target.files[0].name;\n    }\n    else {this.fileName = 'more than one file selected'}\n    let input = event.target;\n    for (var index = 0; index < input.files.length; index++) {\n      let reader = new FileReader();\n      reader.readAsText(input.files[index]);\n      reader.onload = () => {\n        // this 'text' is the content of the file\n        let text = reader.result;\n        if (typeof text === \"string\") {\n          const text_list = text.split(/,|\\n|\\t/).map(Number).filter(Boolean)\n          this.namesService.getNames(text_list).catch((err)=> console.log('error: ', err))\n        }\n      }\n    }\n  }\n}\n","<button mat-raised-button (click)=\"fileInput.click()\" class=\"button\">\n    <fa-icon [icon]=\"['fas', 'upload']\" ></fa-icon>\n    <span>   Choose a file…</span>\n    <input\n        #fileInput\n        type=\"file\"\n        (change)='openFile($event)'\n        style=\"display:none;\"\n        accept=\".csv, .tsv, .txt\"/>\n</button>\n<span class=\"file-name\">\n            {{ fileName }}\n</span>\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-impress',\n  templateUrl: './impress.component.html',\n  styleUrls: ['./impress.component.css']\n})\nexport class ImpressComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","\n\n<h3><b>Information according to § 5 German Telemedia Act:</b></h3>\n\n<p>Stephan Fuchs<br>\nSeestraße 10<br>\n13353 Berlin</p>\n\n\n<h3><b>Contact:</b></h3>\n<p>phone: +4930187544338<br>\n    e-mail: info@tax2proteome.de<p>","import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport{TaxTableComponent} from \"../tax-table/tax-table.component\";\nimport {TaxData} from \"../user-input.service\";\nimport {UserInputService} from \"../user-input.service\";\nimport {NamesService} from \"../names.service\";\n\n@Component({\n  selector: 'app-list-input',\n  templateUrl: './list-input.component.html',\n  styleUrls: ['./list-input.component.css']\n})\nexport class ListInputComponent implements OnInit {\n\n  @ViewChild('bindingInput') bindingInput: ElementRef;\n\n  constructor(\n      private taxTable: TaxTableComponent,\n      private namesService: NamesService,\n  ) {\n\n  }\n\n  ngOnInit(): void {\n\n  }\n\n\n\n  getTaxIDValue(): any {\n    const splitted = this.bindingInput.nativeElement.value.split(/\\s*[,;]\\s*|\\s/).map(Number).filter(Boolean);\n    this.namesService.getNames(splitted).catch((err)=> console.log('error: ', err))\n  }\n\n\n}\n","<div style=\"align-content:  center\">\n    <label>\n        <textarea class=\"form\" matInputclass=\"text\" value=\"\" #bindingInput></textarea>\n    </label>\n    <button mat-mini-fab matTooltip=\"Add taxon IDs\" class=\"icon\" (click)=\"getTaxIDValue()\">\n        <mat-icon style=\"color:white; size: 20px\"> add </mat-icon>\n    </button>\n</div>","import {Injectable, ViewChild} from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport 'rxjs/add/operator/map';\nimport { HttpParams } from \"@angular/common/http\";\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/operator/retry';\nimport {UserInputService} from \"./user-input.service\";\nimport {TaxTableComponent} from \"./tax-table/tax-table.component\";\nimport {TaxData} from \"./user-input.service\";\nimport {TaxIDData} from \"./user-input.service\";\n\n//communication with taxid database\n@Injectable()\nexport class NamesService {\n\n  private baseUrl = \"http://autocomplete.tax2proteome.de/mquery.php\";\n  private Url2 = \"http://autocomplete.tax2proteome.de/pquery.php\";\n\n  constructor(\n    private http: HttpClient,\n    private taxTable: TaxTableComponent,\n    private userInputService: UserInputService\n  ) { }\n\n  fetchNames<T>(taxids: number[]): Observable<T> {\n      let params = new HttpParams();\n      params = params.set('id', taxids.toString());\n      return this.http\n          .get<T>(`${this.baseUrl}?${params.toString()}`)\n          .retry(3)\n          .catch((err: any) => {\n              return throwError('An error occurred:', err.error.message);\n          })\n  }\n  async getNames(taxids: number[]){\n      try {\n          let receivedData = await this.fetchNames(taxids).toPromise();\n          let receivedData2 = <TaxData[]>receivedData;\n          receivedData2.forEach((entry) => {\n              entry.name = entry.name.replace(/ *\\(taxid:[^)]*\\)*/g, \"\");\n              this.userInputService.addTaxa(entry);\n          });\n          this.taxTable.refreshTable(this.userInputService.selectedTaxa)\n      }\n      catch(e){\n          console.log('error: ', e)\n          //handle exception\n      }\n  }\n  fetchParentIDs<T>(taxids: number[]): Observable<T> {\n      let params = new HttpParams();\n      params = params.set('id', taxids.toString());\n      return this.http\n          .get<T>(`${this.Url2}?${params.toString()}`)\n          .retry(3)\n          .catch((err: any) => {\n              return throwError('An error occurred:', err.error.message);\n            })\n  }\n\n  async getIDs(taxids: number[]): Promise<TaxIDData[]>{\n      try{\n          let receivedData = await this.fetchParentIDs(taxids).toPromise();\n          let receivedData2 = <TaxIDData[]>receivedData;\n          receivedData2.forEach((entry) => {\n              entry.name = entry.name.replace(/ *\\(taxid:[^)]*\\)*/g, \"\");\n\n          });\n          return receivedData2;\n      }\n      catch(e){\n          console.log('error: ', e)\n          //handle exception\n      }\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-nav-bar',\n  templateUrl: './nav-bar.component.html',\n  styleUrls: ['./nav-bar.component.css']\n})\nexport class NavBarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-tab-group>\n    <mat-tab label=\"create\" dynamicHeight>\n        <ng-template matTabContent>\n            <div class=\"content\">\n                <app-create></app-create>\n            </div>\n        </ng-template>\n    </mat-tab>\n    <mat-tab label=\"example\" dynamicHeight>\n        <ng-template matTabContent>\n            <div class=\"content\">\n                <app-example></app-example>\n            </div>\n        </ng-template>\n    </mat-tab>\n    <mat-tab label=\"FAQ\" dynamicHeight>\n        <ng-template matTabContent>\n            <div class=\"content\">\n                <app-faq></app-faq>\n            </div>\n        </ng-template>\n    </mat-tab>\n    <mat-tab label=\"impress\" dynamicHeight>\n        <ng-template matTabContent>\n            <div class=\"content\">\n                <app-impress></app-impress>\n            </div>\n        </ng-template>\n    </mat-tab>\n</mat-tab-group>","import { Component, OnInit,  } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { debounceTime, tap, switchMap, finalize } from 'rxjs/operators';\nimport { Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-power-input',\n  templateUrl: './power-input.component.html',\n  styleUrls: ['./power-input.component.css']\n})\nexport class PowerInputComponent implements OnInit {\n    searchTaxonCtrl = new FormControl();\n    filteredTaxa: any;\n    isLoading = false;\n    errorMsg: string;\n    @Output() messageEvent = new EventEmitter<string>();\n\n    constructor(\n        private http: HttpClient,\n    ) {\n    }\n\n    ngOnInit() {\n        this.searchTaxonCtrl.valueChanges\n            .pipe(\n                debounceTime(500),\n                tap(() => {\n                    this.errorMsg = \"\";\n                    this.filteredTaxa = [];\n                    this.isLoading = true;\n                }),\n                switchMap(value => this.http.get(\"http://autocomplete.tax2proteome.de/query.php?q=\" + value + \"&limit=5\")\n                    .pipe(\n                        finalize(() => {\n                            this.isLoading = false\n                        }),\n                    )\n                )\n            )\n            .subscribe(data => {\n                this.errorMsg = \"\";\n                this.filteredTaxa = data;\n            });\n    }\n\n    displayName(taxon: { taxid: number, name: string }): string {\n        return taxon && taxon.name ? taxon.name : '';\n    }\n\n    sendTaxEntry(selectedTaxon) {\n        this.searchTaxonCtrl.setValue('');\n        this.messageEvent.emit(selectedTaxon);\n    }\n}\n","<mat-form-field>\n    <input matInput placeholder=\"Add taxon by scientific name or id\" aria-label=\"State\" [matAutocomplete]=\"auto\"\n        [formControl]=\"searchTaxonCtrl\">\n    <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)='sendTaxEntry($event.option.value)'\n        [displayWith]=\"displayName\">\n        <mat-option *ngIf=\"isLoading\" class=\"is-loading\">Loading...</mat-option>\n        <ng-container *ngIf=\"!isLoading\">\n            <mat-option *ngFor=\"let taxon of filteredTaxa\" [value]=\"taxon\">\n                <span>{{taxon.name}}</span>\n            </mat-option>\n        </ng-container>\n    </mat-autocomplete>\n</mat-form-field>","import {AfterViewInit, Component, OnInit, ViewChild} from '@angular/core';\nimport {TaxData} from \"../user-input.service\";\nimport {UserInputService} from \"../user-input.service\";\nimport {MatTable, MatTableDataSource} from '@angular/material/table';\nimport {MatSort} from '@angular/material/sort';\nimport {MatPaginator} from \"@angular/material/paginator\";\n\n\n@Component({\n  selector: 'app-tax-table',\n  templateUrl: './tax-table.component.html',\n  styleUrls: ['./tax-table.component.css']\n})\nexport class TaxTableComponent implements AfterViewInit {\n  displayedColumns: string[] = ['taxid', 'name', 'rank'];\n  dataSource = new MatTableDataSource(this.UserInputService.selectedTaxa);\n  //DataArray = this.UserInputService.selectedTaxa\n\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild(MatPaginator, {static:true}) paginator:MatPaginator;\n  //@ViewChild('table') table: MatTable<any>;\n\n  constructor(\n      public UserInputService: UserInputService,\n  ) {\n  }\n\n  ngOnInit(): void { }\n\n  ngAfterViewInit() {\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator=this.paginator\n  }\n\n  // all data are in dataSource.data but not shown!!!\n  refreshTable(input) {\n    //this.dataSource.data = input;\n    this.dataSource.data = this.UserInputService.rankedTaxa;\n    console.log('dataSource.data: ', this.dataSource.data);\n    //this.DataArray = input\n    //this.table.renderRows()\n  }\n\n  deleteSelectedTaxIDs(){\n    this.UserInputService.selectedTaxa = [];\n    this.dataSource.data = this.UserInputService.selectedTaxa;\n  }\n\n  click(){\n    this.dataSource.data = this.UserInputService.rankedTaxa;\n  }\n\n}\n","<table mat-table [dataSource]=\"dataSource\" matSort class=\"container_table mat-elevation-z8\">\n    <!-- TaxID Column -->\n    <ng-container matColumnDef=\"taxid\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Taxon ID </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.taxid}} </td>\n    </ng-container>\n    <!-- Name Column -->\n    <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"header\"> Name </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n    </ng-container>\n    <!-- Rank Column -->\n    <ng-container matColumnDef=\"rank\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"header\"> Rank </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.rank}} </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>\n\n<p></p>\n<button mat-fab color=\"warn\" matTooltip=\"Delete all taxa\" aria-label=\"Delete taxa\"  (click)=\"deleteSelectedTaxIDs()\">\n    <mat-icon>delete</mat-icon>\n</button>\n<p></p>\n<p></p>\n<div>\n    <button mat-raised-button color=\"\" (click)=\"click()\">Refresh</button>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-title-bar',\n  templateUrl: './title-bar.component.html',\n  styleUrls: ['./title-bar.component.css']\n})\nexport class TitleBarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-toolbar>\n  <span>Tax2Proteome</span>\n</mat-toolbar>","import {ElementRef, Injectable, ViewChild} from '@angular/core';\nimport {FormControl} from \"@angular/forms\";\n\n\nexport interface TaxData {\n  taxid: number;\n  name: string;\n  rank: string;\n}\n\nexport interface TaxIDData {\n  taxid: number;\n  name: string;\n  rank: string;\n  parentid: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserInputService {\n  myControl = new FormControl();\n  selectedTaxa:TaxData[] = [];\n  //selectedTaxa:TaxData[] = [{ taxid: 22, name: \"zwei\", rank: \"no rank\" }];\n  rankedTaxa:TaxIDData[] = [];\n  selectedDatabase: string = 'Uniprot';\n  selectedRank:string='species';\n  selectedHeader:string= 'reduced headers';\n  selectedRedundant:string= 'non-redundant';\n  databases: string[] = ['Uniprot', 'NCBI-nr', 'Swissprot'];\n  ranks: string[] = ['species', 'genus', 'family', 'order', 'class', 'phylum', 'kingdom', `superkingdom`];\n  redundant_options: string[] = ['non-redundant', 'redundant'];\n  header_options: string[] = ['reduced headers', 'full headers'];\n  order: string[] = ['no rank', 'varietas', 'forma', 'subspecies', 'species', 'species subgroup','species group',\n    'series', 'subsection', 'section', 'subgenus', 'genus', 'subtribe', 'tribe', 'subfamily', 'family', 'superfamily',\n    'parvorder', 'infraorder', 'suborder', 'order', 'superorder', 'subcohort', 'cohort', 'infraclass', 'subclass',\n    'class', 'superclass', 'subphylum', 'phylum', 'superphylum', 'subkingdom', 'kingdom', 'superkingdom'];\n\n  getTaxa() {\n    return this.selectedTaxa;\n  }\n\n  deleteSelectedTaxIDs(){\n    this.selectedTaxa = [];\n    return this.selectedTaxa;\n  }\n\n  constructor(\n  ) { }\n\n\n  addTaxa(taxObject: TaxData): void {\n    if(this.selectedTaxa.map(a => a.taxid).indexOf(taxObject.taxid) == -1)\n    {\n      this.selectedTaxa.push(taxObject);\n    }\n      this.myControl.setValue('');\n    }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}